package mythologybattle;

import java.awt.CardLayout;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 * Project Mythology Battle
 * Term Project For CECS 543
 * Group Member Qianyi(Charles) Tang; Yunzan(Ned) Hu
 * Current Iteration: Iteration I
 * @author Qianyi Tang
 */
public class mythologyBattleGui extends javax.swing.JFrame {
    
    MBplayBoard playBoard = new MBplayBoard();
    //groupJLabel by culture and area
    ArrayList<JLabel> norseCity = new ArrayList<>();       
    ArrayList<JLabel> greekCity = new ArrayList<>();        
    ArrayList<JLabel> egyptCity = new ArrayList<>();
    ArrayList<JLabel> norseProduction = new ArrayList<>();
    ArrayList<JLabel> greekProduction = new ArrayList<>();
    ArrayList<JLabel> egyptProduction = new ArrayList<>();
    ArrayList<JLabel> tileSelection = new ArrayList<>();
    //randomNumb for AI to pick tile
    ArrayList stackAI = new ArrayList();
    //random
    Random random = new Random();
    //round counter
    int roundCounter = 0;
    //
    int playerTurn = 3;
    //Icon Image
    ImageIcon img = new ImageIcon("/mythologybattle/resource/AOMIcon.png");
    //recurit unit limit for player
    int playerUnitCount = 0;
    //recruit unit limit for enemy
    int aiUnitCount = 0;
    //battleEnemy
    String whichAI;
    //Random
    Random rm = new Random();
    //CPU turn
    int cpuTurns;
    
    /**********************/
    int randomBuildCount=1;
    int currentBuildCount=0;
    int randomRecruitCount=2;
    int currentRecruitCount=0;
    int randomRoundCounter=0;
    /**
     * Creates new form mythologyBattleGui
     */
    public mythologyBattleGui() {
        initComponents();
        labelClear();
        groupBoardArea();
        playBoard.initGame();
        initRan(18);
    }

/**************************************************************/
    //TESTING ONLY
    //animation testing
   /* public void animate(){
        int animationTime = 1000;
        int x = b1.getX();
        int y = b1.getY();
        int fps = 60;
        int delay = 1000/fps;
        long start = System.currentTimeMillis();
        Timer t = new Timer(delay, null);
        t.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                throw new UnsupportedOperationException("Not supported yet.");
                //long elapsed = (System.currentTimeMillis()) - start;
            }
            
        });
    }
/***************************************************************/
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        cultureDialog = new javax.swing.JDialog();
        cultureSelection = new javax.swing.JLayeredPane();
        cultureNorse = new javax.swing.JButton();
        cultureGreek = new javax.swing.JButton();
        cultureEgypt = new javax.swing.JButton();
        productionFrame = new javax.swing.JFrame();
        productionDisplay = new javax.swing.JLayeredPane();
        p1 = new javax.swing.JLabel();
        p2 = new javax.swing.JLabel();
        p3 = new javax.swing.JLabel();
        p4 = new javax.swing.JLabel();
        p5 = new javax.swing.JLabel();
        p6 = new javax.swing.JLabel();
        p7 = new javax.swing.JLabel();
        p8 = new javax.swing.JLabel();
        p11 = new javax.swing.JLabel();
        p12 = new javax.swing.JLabel();
        p13 = new javax.swing.JLabel();
        p14 = new javax.swing.JLabel();
        p15 = new javax.swing.JLabel();
        p16 = new javax.swing.JLabel();
        p17 = new javax.swing.JLabel();
        p18 = new javax.swing.JLabel();
        p9 = new javax.swing.JLabel();
        p10 = new javax.swing.JLabel();
        vectoryCardDialog = new javax.swing.JDialog();
        mainScrollPane = new javax.swing.JScrollPane();
        vectCard = new javax.swing.JLayeredPane();
        vcRCube = new javax.swing.JLabel();
        vcRCube2 = new javax.swing.JLabel();
        vcRCube3 = new javax.swing.JLabel();
        vcRcube4 = new javax.swing.JLabel();
        redCubeOnTLA = new javax.swing.JLabel();
        jLabelx1 = new javax.swing.JLabel();
        jLabelx2 = new javax.swing.JLabel();
        redCubeOnTMB = new javax.swing.JLabel();
        jLabelx3 = new javax.swing.JLabel();
        redCubeOnTW = new javax.swing.JLabel();
        jLabelx4 = new javax.swing.JLabel();
        redCubeOnTLB = new javax.swing.JLabel();
        largArmyCard = new javax.swing.JLabel();
        mostBuildCard = new javax.swing.JLabel();
        wonderCard = new javax.swing.JLabel();
        lastBattCard = new javax.swing.JLabel();
        permaCardDialog = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        permaCardPane = new javax.swing.JLayeredPane();
        permaCard1 = new javax.swing.JLabel();
        permaCard2 = new javax.swing.JLabel();
        permaCard3 = new javax.swing.JLabel();
        permaCard4 = new javax.swing.JLabel();
        permaCard5 = new javax.swing.JLabel();
        permaCard6 = new javax.swing.JLabel();
        permaCard7 = new javax.swing.JLabel();
        agePane = new javax.swing.JPanel();
        currAge = new javax.swing.JLabel();
        cardLeftAge = new javax.swing.JLabel();
        handCardDialog = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        handCardPane = new javax.swing.JLayeredPane();
        handCard1 = new javax.swing.JLabel();
        handCard2 = new javax.swing.JLabel();
        handCard3 = new javax.swing.JLabel();
        handCard4 = new javax.swing.JLabel();
        handCard5 = new javax.swing.JLabel();
        handCard6 = new javax.swing.JLabel();
        handCard7 = new javax.swing.JLabel();
        handCard8 = new javax.swing.JLabel();
        handCard9 = new javax.swing.JLabel();
        handCard10 = new javax.swing.JLabel();
        typeSelectDialog = new javax.swing.JDialog();
        cultureSelection1 = new javax.swing.JLayeredPane();
        goldCube = new javax.swing.JButton();
        favorCube = new javax.swing.JButton();
        foodCube = new javax.swing.JButton();
        woodCube = new javax.swing.JButton();
        tradeDialog = new javax.swing.JDialog();
        mainScrollPane2 = new javax.swing.JScrollPane();
        tradePane = new javax.swing.JLayeredPane();
        tradeSlider = new javax.swing.JSlider();
        cubeLeft = new javax.swing.JComboBox();
        cubeRight = new javax.swing.JComboBox();
        cubeLeftNum = new javax.swing.JTextField();
        cubeRightNum = new javax.swing.JTextField();
        conform = new javax.swing.JButton();
        consume = new javax.swing.JComboBox();
        buildDialog = new javax.swing.JDialog();
        mainScrollPane3 = new javax.swing.JScrollPane();
        buildPane = new javax.swing.JLayeredPane();
        buildingsBox = new javax.swing.JComboBox();
        buildButton = new javax.swing.JButton();
        battleCardDialog = new javax.swing.JDialog();
        jScrollPane3 = new javax.swing.JScrollPane();
        battleCardPane = new javax.swing.JLayeredPane();
        battleUnit1 = new javax.swing.JLabel();
        battleUnit2 = new javax.swing.JLabel();
        battleUnit3 = new javax.swing.JLabel();
        battleUnit4 = new javax.swing.JLabel();
        battleUnit5 = new javax.swing.JLabel();
        battleUnit6 = new javax.swing.JLabel();
        battleUnit7 = new javax.swing.JLabel();
        battleUnit8 = new javax.swing.JLabel();
        battleUnit9 = new javax.swing.JLabel();
        battleUnit10 = new javax.swing.JLabel();
        battleUnit11 = new javax.swing.JLabel();
        battleUnit12 = new javax.swing.JLabel();
        recruit = new javax.swing.JButton();
        battleUnitDialog = new javax.swing.JDialog();
        jScrollPane4 = new javax.swing.JScrollPane();
        battleUnitPane = new javax.swing.JLayeredPane();
        playerUnit1 = new javax.swing.JLabel();
        playerUnit2 = new javax.swing.JLabel();
        playerUnit3 = new javax.swing.JLabel();
        playerUnit4 = new javax.swing.JLabel();
        playerUnit5 = new javax.swing.JLabel();
        playerUnit6 = new javax.swing.JLabel();
        playerUnit7 = new javax.swing.JLabel();
        playerUnit8 = new javax.swing.JLabel();
        playerUnit9 = new javax.swing.JLabel();
        playerUnit10 = new javax.swing.JLabel();
        playerUnit11 = new javax.swing.JLabel();
        playerUnit12 = new javax.swing.JLabel();
        tradeDialog1 = new javax.swing.JDialog();
        mainScrollPane4 = new javax.swing.JScrollPane();
        tradePane1 = new javax.swing.JLayeredPane();
        tradeSlider1 = new javax.swing.JSlider();
        cubeLeft1 = new javax.swing.JComboBox();
        cubeRight1 = new javax.swing.JComboBox();
        cubeLeftNum1 = new javax.swing.JTextField();
        cubeRightNum1 = new javax.swing.JTextField();
        conform1 = new javax.swing.JButton();
        consume1 = new javax.swing.JComboBox();
        tradeDialog2 = new javax.swing.JDialog();
        mainScrollPane5 = new javax.swing.JScrollPane();
        tradePane2 = new javax.swing.JLayeredPane();
        tradeSlider2 = new javax.swing.JSlider();
        cubeLeft2 = new javax.swing.JComboBox();
        cubeRight2 = new javax.swing.JComboBox();
        cubeLeftNum2 = new javax.swing.JTextField();
        cubeRightNum2 = new javax.swing.JTextField();
        conform2 = new javax.swing.JButton();
        consume2 = new javax.swing.JComboBox();
        buildDialog1 = new javax.swing.JDialog();
        mainScrollPane6 = new javax.swing.JScrollPane();
        buildPane1 = new javax.swing.JLayeredPane();
        buildingsBox1 = new javax.swing.JComboBox();
        buildButton1 = new javax.swing.JButton();
        typeSelectDialog1 = new javax.swing.JDialog();
        cultureSelection2 = new javax.swing.JLayeredPane();
        goldCube1 = new javax.swing.JButton();
        favorCube1 = new javax.swing.JButton();
        foodCube1 = new javax.swing.JButton();
        woodCube1 = new javax.swing.JButton();
        aiBattleSelect = new javax.swing.JDialog();
        cultureSelection3 = new javax.swing.JLayeredPane();
        toAI1 = new javax.swing.JButton();
        toAI2 = new javax.swing.JButton();
        destroyBuilding = new javax.swing.JDialog();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        selectPlayer = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        selectBuilding = new javax.swing.JComboBox();
        remove = new javax.swing.JButton();
        mainLayer = new javax.swing.JLayeredPane();
        norseLayer = new javax.swing.JLayeredPane();
        norseGridLayer = new javax.swing.JLayeredPane();
        norseProductArea = new javax.swing.JLayeredPane();
        n11 = new javax.swing.JLabel();
        n12 = new javax.swing.JLabel();
        n13 = new javax.swing.JLabel();
        n14 = new javax.swing.JLabel();
        n21 = new javax.swing.JLabel();
        n22 = new javax.swing.JLabel();
        n23 = new javax.swing.JLabel();
        n24 = new javax.swing.JLabel();
        n31 = new javax.swing.JLabel();
        n32 = new javax.swing.JLabel();
        n33 = new javax.swing.JLabel();
        n34 = new javax.swing.JLabel();
        n41 = new javax.swing.JLabel();
        n42 = new javax.swing.JLabel();
        n43 = new javax.swing.JLabel();
        n44 = new javax.swing.JLabel();
        norseCityArea = new javax.swing.JLayeredPane();
        N11 = new javax.swing.JLabel();
        N12 = new javax.swing.JLabel();
        N13 = new javax.swing.JLabel();
        N14 = new javax.swing.JLabel();
        N21 = new javax.swing.JLabel();
        N22 = new javax.swing.JLabel();
        N23 = new javax.swing.JLabel();
        N24 = new javax.swing.JLabel();
        N31 = new javax.swing.JLabel();
        N32 = new javax.swing.JLabel();
        N33 = new javax.swing.JLabel();
        N34 = new javax.swing.JLabel();
        N41 = new javax.swing.JLabel();
        N42 = new javax.swing.JLabel();
        N43 = new javax.swing.JLabel();
        N44 = new javax.swing.JLabel();
        norseBackLayer = new javax.swing.JLayeredPane();
        norseBackground = new javax.swing.JLabel();
        greekLayer = new javax.swing.JLayeredPane();
        greekGridLayer = new javax.swing.JLayeredPane();
        greekProductArea = new javax.swing.JLayeredPane();
        g11 = new javax.swing.JLabel();
        g44 = new javax.swing.JLabel();
        g43 = new javax.swing.JLabel();
        g42 = new javax.swing.JLabel();
        g41 = new javax.swing.JLabel();
        g34 = new javax.swing.JLabel();
        g33 = new javax.swing.JLabel();
        g32 = new javax.swing.JLabel();
        g31 = new javax.swing.JLabel();
        g24 = new javax.swing.JLabel();
        g23 = new javax.swing.JLabel();
        g22 = new javax.swing.JLabel();
        g21 = new javax.swing.JLabel();
        g14 = new javax.swing.JLabel();
        g13 = new javax.swing.JLabel();
        g12 = new javax.swing.JLabel();
        greekCityArea = new javax.swing.JLayeredPane();
        G22 = new javax.swing.JLabel();
        G33 = new javax.swing.JLabel();
        G32 = new javax.swing.JLabel();
        G31 = new javax.swing.JLabel();
        G34 = new javax.swing.JLabel();
        G11 = new javax.swing.JLabel();
        G14 = new javax.swing.JLabel();
        G12 = new javax.swing.JLabel();
        G21 = new javax.swing.JLabel();
        G23 = new javax.swing.JLabel();
        G13 = new javax.swing.JLabel();
        G24 = new javax.swing.JLabel();
        G41 = new javax.swing.JLabel();
        G42 = new javax.swing.JLabel();
        G43 = new javax.swing.JLabel();
        G44 = new javax.swing.JLabel();
        greekBackLayer = new javax.swing.JLayeredPane();
        greekBackground = new javax.swing.JLabel();
        egyptLayer = new javax.swing.JLayeredPane();
        egyptGridLayer = new javax.swing.JLayeredPane();
        egyptProductArea = new javax.swing.JLayeredPane();
        e41 = new javax.swing.JLabel();
        e33 = new javax.swing.JLabel();
        e32 = new javax.swing.JLabel();
        e42 = new javax.swing.JLabel();
        e44 = new javax.swing.JLabel();
        e43 = new javax.swing.JLabel();
        e31 = new javax.swing.JLabel();
        e21 = new javax.swing.JLabel();
        e34 = new javax.swing.JLabel();
        e23 = new javax.swing.JLabel();
        e24 = new javax.swing.JLabel();
        e22 = new javax.swing.JLabel();
        e14 = new javax.swing.JLabel();
        e13 = new javax.swing.JLabel();
        e12 = new javax.swing.JLabel();
        e11 = new javax.swing.JLabel();
        egyptCityArea = new javax.swing.JLayeredPane();
        E44 = new javax.swing.JLabel();
        E43 = new javax.swing.JLabel();
        E42 = new javax.swing.JLabel();
        E41 = new javax.swing.JLabel();
        E34 = new javax.swing.JLabel();
        E33 = new javax.swing.JLabel();
        E32 = new javax.swing.JLabel();
        E31 = new javax.swing.JLabel();
        E24 = new javax.swing.JLabel();
        E23 = new javax.swing.JLabel();
        E22 = new javax.swing.JLabel();
        E21 = new javax.swing.JLabel();
        E14 = new javax.swing.JLabel();
        E13 = new javax.swing.JLabel();
        E12 = new javax.swing.JLabel();
        E11 = new javax.swing.JLabel();
        egyptBackLayer = new javax.swing.JLayeredPane();
        egyptBackground = new javax.swing.JLabel();
        mainActionBar = new javax.swing.JToolBar();
        startButton = new javax.swing.JButton();
        previousButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        handButton = new javax.swing.JButton();
        unitButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        scoreLayer = new javax.swing.JLayeredPane();
        humanScore = new javax.swing.JLayeredPane();
        rCube = new javax.swing.JLabel();
        oCube = new javax.swing.JLabel();
        bCube = new javax.swing.JLabel();
        gCube = new javax.swing.JLabel();
        multiP = new javax.swing.JLabel();
        multiP2 = new javax.swing.JLabel();
        multiP3 = new javax.swing.JLabel();
        multiP4 = new javax.swing.JLabel();
        hRedCube = new javax.swing.JLabel();
        hOrangeCube = new javax.swing.JLabel();
        hBlueCube = new javax.swing.JLabel();
        hGreenCube = new javax.swing.JLabel();
        goCube = new javax.swing.JLabel();
        multiP12 = new javax.swing.JLabel();
        hGoldenCube = new javax.swing.JLabel();
        hCultureLabel = new javax.swing.JLabel();
        ai1Score = new javax.swing.JLayeredPane();
        rCube1 = new javax.swing.JLabel();
        oCube1 = new javax.swing.JLabel();
        bCube1 = new javax.swing.JLabel();
        gCube1 = new javax.swing.JLabel();
        multiP1 = new javax.swing.JLabel();
        multiP5 = new javax.swing.JLabel();
        multiP6 = new javax.swing.JLabel();
        multiP7 = new javax.swing.JLabel();
        ai1RedCube = new javax.swing.JLabel();
        ai1OrangeCube = new javax.swing.JLabel();
        ai1BlueCube = new javax.swing.JLabel();
        ai1GreenCube = new javax.swing.JLabel();
        goCube2 = new javax.swing.JLabel();
        multiP13 = new javax.swing.JLabel();
        ai1GoldenCube = new javax.swing.JLabel();
        ai1CultureLabel = new javax.swing.JLabel();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        rCube2 = new javax.swing.JLabel();
        oCube2 = new javax.swing.JLabel();
        bCube2 = new javax.swing.JLabel();
        gCube2 = new javax.swing.JLabel();
        multiP8 = new javax.swing.JLabel();
        multiP9 = new javax.swing.JLabel();
        multiP10 = new javax.swing.JLabel();
        multiP11 = new javax.swing.JLabel();
        ai2RedCube = new javax.swing.JLabel();
        ai2OrangeCube = new javax.swing.JLabel();
        ai2BlueCube = new javax.swing.JLabel();
        ai2GreenCube = new javax.swing.JLabel();
        goCube3 = new javax.swing.JLabel();
        multiP14 = new javax.swing.JLabel();
        ai2GoldenCube = new javax.swing.JLabel();
        ai2CultureLabel = new javax.swing.JLabel();

        cultureDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        cultureDialog.setMinimumSize(new java.awt.Dimension(386, 91));
        cultureDialog.setResizable(false);
        cultureDialog.setType(java.awt.Window.Type.UTILITY);
        cultureDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                cultureDialogWindowClosed(evt);
            }
        });

        cultureSelection.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Please Choose a Culture", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        cultureSelection.setPreferredSize(new java.awt.Dimension(400, 61));

        cultureNorse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Norse.png"))); // NOI18N
        cultureNorse.setFocusPainted(false);
        cultureNorse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cultureNorseActionPerformed(evt);
            }
        });

        cultureGreek.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Greek.png"))); // NOI18N
        cultureGreek.setFocusPainted(false);
        cultureGreek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cultureGreekActionPerformed(evt);
            }
        });

        cultureEgypt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Egyptian.png"))); // NOI18N
        cultureEgypt.setFocusPainted(false);
        cultureEgypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cultureEgyptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout cultureSelectionLayout = new javax.swing.GroupLayout(cultureSelection);
        cultureSelection.setLayout(cultureSelectionLayout);
        cultureSelectionLayout.setHorizontalGroup(
            cultureSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cultureSelectionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cultureNorse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cultureGreek)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cultureEgypt)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        cultureSelectionLayout.setVerticalGroup(
            cultureSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cultureNorse)
            .addComponent(cultureGreek)
            .addComponent(cultureEgypt)
        );
        cultureSelection.setLayer(cultureNorse, javax.swing.JLayeredPane.DEFAULT_LAYER);
        cultureSelection.setLayer(cultureGreek, javax.swing.JLayeredPane.DEFAULT_LAYER);
        cultureSelection.setLayer(cultureEgypt, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout cultureDialogLayout = new javax.swing.GroupLayout(cultureDialog.getContentPane());
        cultureDialog.getContentPane().setLayout(cultureDialogLayout);
        cultureDialogLayout.setHorizontalGroup(
            cultureDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cultureSelection, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
        );
        cultureDialogLayout.setVerticalGroup(
            cultureDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cultureSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        productionFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        productionFrame.setBackground(new java.awt.Color(0, 0, 0));
        productionFrame.setLocationByPlatform(true);
        productionFrame.setMinimumSize(new java.awt.Dimension(575, 325));
        productionFrame.setResizable(false);
        productionFrame.setType(java.awt.Window.Type.UTILITY);
        productionFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                productionFrameWindowClosed(evt);
            }
        });

        productionDisplay.setBackground(new java.awt.Color(0, 0, 0));
        productionDisplay.setMinimumSize(new java.awt.Dimension(565, 280));
        productionDisplay.setName("0"); // NOI18N
        productionDisplay.setOpaque(true);
        productionDisplay.setLayout(new java.awt.GridLayout(3, 6, 5, 5));

        p1.setBackground(new java.awt.Color(0, 0, 0));
        p1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mythologybattle/resource/Fertile1Favor.png"))); // NOI18N
        p1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p1MouseClicked(evt);
            }
        });
        productionDisplay.add(p1);

        p2.setBackground(new java.awt.Color(0, 0, 0));
        p2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p2MouseClicked(evt);
            }
        });
        productionDisplay.add(p2);

        p3.setBackground(new java.awt.Color(0, 0, 0));
        p3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p3MouseClicked(evt);
            }
        });
        productionDisplay.add(p3);

        p4.setBackground(new java.awt.Color(0, 0, 0));
        p4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p4MouseClicked(evt);
            }
        });
        productionDisplay.add(p4);

        p5.setBackground(new java.awt.Color(0, 0, 0));
        p5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p5MouseClicked(evt);
            }
        });
        productionDisplay.add(p5);

        p6.setBackground(new java.awt.Color(0, 0, 0));
        p6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p6MouseClicked(evt);
            }
        });
        productionDisplay.add(p6);

        p7.setBackground(new java.awt.Color(0, 0, 0));
        p7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p7MouseClicked(evt);
            }
        });
        productionDisplay.add(p7);

        p8.setBackground(new java.awt.Color(0, 0, 0));
        p8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p8MouseClicked(evt);
            }
        });
        productionDisplay.add(p8);

        p11.setBackground(new java.awt.Color(0, 0, 0));
        p11.setMaximumSize(new java.awt.Dimension(90, 90));
        p11.setMinimumSize(new java.awt.Dimension(90, 90));
        p11.setPreferredSize(new java.awt.Dimension(90, 90));
        p11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p11MouseClicked(evt);
            }
        });
        productionDisplay.add(p11);

        p12.setBackground(new java.awt.Color(0, 0, 0));
        p12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p12MouseClicked(evt);
            }
        });
        productionDisplay.add(p12);

        p13.setBackground(new java.awt.Color(0, 0, 0));
        p13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p13MouseClicked(evt);
            }
        });
        productionDisplay.add(p13);

        p14.setBackground(new java.awt.Color(0, 0, 0));
        p14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p14MouseClicked(evt);
            }
        });
        productionDisplay.add(p14);

        p15.setBackground(new java.awt.Color(0, 0, 0));
        p15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p15MouseClicked(evt);
            }
        });
        productionDisplay.add(p15);

        p16.setBackground(new java.awt.Color(0, 0, 0));
        p16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p16MouseClicked(evt);
            }
        });
        productionDisplay.add(p16);

        p17.setBackground(new java.awt.Color(0, 0, 0));
        p17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p17MouseClicked(evt);
            }
        });
        productionDisplay.add(p17);

        p18.setBackground(new java.awt.Color(0, 0, 0));
        p18.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p18MouseClicked(evt);
            }
        });
        productionDisplay.add(p18);

        p9.setBackground(new java.awt.Color(0, 0, 0));
        p9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p9MouseClicked(evt);
            }
        });
        productionDisplay.add(p9);

        p10.setBackground(new java.awt.Color(0, 0, 0));
        p10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p10MouseClicked(evt);
            }
        });
        productionDisplay.add(p10);

        javax.swing.GroupLayout productionFrameLayout = new javax.swing.GroupLayout(productionFrame.getContentPane());
        productionFrame.getContentPane().setLayout(productionFrameLayout);
        productionFrameLayout.setHorizontalGroup(
            productionFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(productionDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
        );
        productionFrameLayout.setVerticalGroup(
            productionFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(productionDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
        );

        vectoryCardDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        vectoryCardDialog.setPreferredSize(new java.awt.Dimension(650, 260));
        vectoryCardDialog.setType(java.awt.Window.Type.UTILITY);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, vectoryCardDialog, org.jdesktop.beansbinding.ELProperty.create("${preferredSize}"), vectoryCardDialog, org.jdesktop.beansbinding.BeanProperty.create("minimumSize"));
        bindingGroup.addBinding(binding);

        vectoryCardDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                vectoryCardDialogWindowClosed(evt);
            }
        });
        vectoryCardDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        vectCard.setBorder(javax.swing.BorderFactory.createTitledBorder("Vectory Cards"));

        vcRCube.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mythologybattle/resource/rsz_cube_red.png"))); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, vcRCube, org.jdesktop.beansbinding.ELProperty.create("${icon}"), vcRCube2, org.jdesktop.beansbinding.BeanProperty.create("icon"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, vcRCube, org.jdesktop.beansbinding.ELProperty.create("${icon}"), vcRCube3, org.jdesktop.beansbinding.BeanProperty.create("icon"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, vcRCube, org.jdesktop.beansbinding.ELProperty.create("${icon}"), vcRcube4, org.jdesktop.beansbinding.BeanProperty.create("icon"));
        bindingGroup.addBinding(binding);

        redCubeOnTLA.setText("0");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jLabelx1, org.jdesktop.beansbinding.ELProperty.create("${foreground}"), redCubeOnTLA, org.jdesktop.beansbinding.BeanProperty.create("foreground"));
        bindingGroup.addBinding(binding);

        jLabelx1.setForeground(new java.awt.Color(255, 255, 255));
        jLabelx1.setText("X");

        jLabelx2.setText("X");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jLabelx1, org.jdesktop.beansbinding.ELProperty.create("${foreground}"), jLabelx2, org.jdesktop.beansbinding.BeanProperty.create("foreground"));
        bindingGroup.addBinding(binding);

        redCubeOnTMB.setText("0");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jLabelx1, org.jdesktop.beansbinding.ELProperty.create("${foreground}"), redCubeOnTMB, org.jdesktop.beansbinding.BeanProperty.create("foreground"));
        bindingGroup.addBinding(binding);

        jLabelx3.setText("X");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jLabelx1, org.jdesktop.beansbinding.ELProperty.create("${foreground}"), jLabelx3, org.jdesktop.beansbinding.BeanProperty.create("foreground"));
        bindingGroup.addBinding(binding);

        redCubeOnTW.setText("0");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jLabelx1, org.jdesktop.beansbinding.ELProperty.create("${foreground}"), redCubeOnTW, org.jdesktop.beansbinding.BeanProperty.create("foreground"));
        bindingGroup.addBinding(binding);

        jLabelx4.setText("X");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jLabelx1, org.jdesktop.beansbinding.ELProperty.create("${foreground}"), jLabelx4, org.jdesktop.beansbinding.BeanProperty.create("foreground"));
        bindingGroup.addBinding(binding);

        redCubeOnTLB.setText("0");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jLabelx1, org.jdesktop.beansbinding.ELProperty.create("${foreground}"), redCubeOnTLB, org.jdesktop.beansbinding.BeanProperty.create("foreground"));
        bindingGroup.addBinding(binding);

        largArmyCard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mythologybattle/resource/vc_TLA.png"))); // NOI18N
        largArmyCard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                largArmyCardMouseClicked(evt);
            }
        });

        mostBuildCard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mythologybattle/resource/vc_TMB.png"))); // NOI18N
        mostBuildCard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mostBuildCardMouseClicked(evt);
            }
        });

        wonderCard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mythologybattle/resource/vc_TW.png"))); // NOI18N
        wonderCard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wonderCardMouseClicked(evt);
            }
        });

        lastBattCard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mythologybattle/resource/vc_WTLB.png"))); // NOI18N
        lastBattCard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lastBattCardMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout vectCardLayout = new javax.swing.GroupLayout(vectCard);
        vectCard.setLayout(vectCardLayout);
        vectCardLayout.setHorizontalGroup(
            vectCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vectCardLayout.createSequentialGroup()
                .addGroup(vectCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(largArmyCard)
                    .addGroup(vectCardLayout.createSequentialGroup()
                        .addComponent(vcRCube)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelx1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(redCubeOnTLA)))
                .addGap(18, 18, 18)
                .addGroup(vectCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mostBuildCard)
                    .addGroup(vectCardLayout.createSequentialGroup()
                        .addComponent(vcRCube2)
                        .addGap(8, 8, 8)
                        .addComponent(jLabelx2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(redCubeOnTMB)))
                .addGap(18, 18, 18)
                .addGroup(vectCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wonderCard)
                    .addGroup(vectCardLayout.createSequentialGroup()
                        .addComponent(vcRCube3)
                        .addGap(8, 8, 8)
                        .addComponent(jLabelx3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(redCubeOnTW)))
                .addGap(18, 18, 18)
                .addGroup(vectCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(vectCardLayout.createSequentialGroup()
                        .addComponent(vcRcube4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelx4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(redCubeOnTLB))
                    .addComponent(lastBattCard)))
        );
        vectCardLayout.setVerticalGroup(
            vectCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, vectCardLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(vectCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(vcRCube3)
                    .addComponent(vcRcube4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(vectCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(redCubeOnTLB)
                        .addComponent(jLabelx4))
                    .addGroup(vectCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(redCubeOnTW)
                        .addComponent(jLabelx3))
                    .addGroup(vectCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(redCubeOnTMB)
                        .addComponent(jLabelx2))
                    .addGroup(vectCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(vcRCube, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, vectCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(redCubeOnTLA)
                            .addComponent(jLabelx1)))
                    .addGroup(vectCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(largArmyCard)
                        .addComponent(mostBuildCard)
                        .addComponent(wonderCard)
                        .addComponent(lastBattCard))
                    .addComponent(vcRCube2))
                .addGap(0, 0, 0))
        );
        vectCard.setLayer(vcRCube, javax.swing.JLayeredPane.PALETTE_LAYER);
        vectCard.setLayer(vcRCube2, javax.swing.JLayeredPane.PALETTE_LAYER);
        vectCard.setLayer(vcRCube3, javax.swing.JLayeredPane.PALETTE_LAYER);
        vectCard.setLayer(vcRcube4, javax.swing.JLayeredPane.PALETTE_LAYER);
        vectCard.setLayer(redCubeOnTLA, javax.swing.JLayeredPane.PALETTE_LAYER);
        vectCard.setLayer(jLabelx1, javax.swing.JLayeredPane.PALETTE_LAYER);
        vectCard.setLayer(jLabelx2, javax.swing.JLayeredPane.PALETTE_LAYER);
        vectCard.setLayer(redCubeOnTMB, javax.swing.JLayeredPane.PALETTE_LAYER);
        vectCard.setLayer(jLabelx3, javax.swing.JLayeredPane.PALETTE_LAYER);
        vectCard.setLayer(redCubeOnTW, javax.swing.JLayeredPane.PALETTE_LAYER);
        vectCard.setLayer(jLabelx4, javax.swing.JLayeredPane.PALETTE_LAYER);
        vectCard.setLayer(redCubeOnTLB, javax.swing.JLayeredPane.PALETTE_LAYER);
        vectCard.setLayer(largArmyCard, javax.swing.JLayeredPane.DEFAULT_LAYER);
        vectCard.setLayer(mostBuildCard, javax.swing.JLayeredPane.DEFAULT_LAYER);
        vectCard.setLayer(wonderCard, javax.swing.JLayeredPane.DEFAULT_LAYER);
        vectCard.setLayer(lastBattCard, javax.swing.JLayeredPane.DEFAULT_LAYER);

        mainScrollPane.setViewportView(vectCard);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 378;
        gridBagConstraints.ipady = 278;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        vectoryCardDialog.getContentPane().add(mainScrollPane, gridBagConstraints);

        permaCardDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        permaCardDialog.setPreferredSize(new java.awt.Dimension(723, 520));
        permaCardDialog.setType(java.awt.Window.Type.UTILITY);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, permaCardDialog, org.jdesktop.beansbinding.ELProperty.create("${preferredSize}"), permaCardDialog, org.jdesktop.beansbinding.BeanProperty.create("minimumSize"));
        bindingGroup.addBinding(binding);

        permaCardDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                permaCardDialogWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                permaCardDialogWindowClosing(evt);
            }
        });
        permaCardDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, permaCardDialog, org.jdesktop.beansbinding.ELProperty.create("${preferredSize}"), jScrollPane1, org.jdesktop.beansbinding.BeanProperty.create("preferredSize"));
        bindingGroup.addBinding(binding);

        permaCardPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Permanent Card"));
        permaCardPane.setPreferredSize(new java.awt.Dimension(703, 470));
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout();
        flowLayout1.setAlignOnBaseline(true);
        permaCardPane.setLayout(flowLayout1);

        permaCard1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/EnextageP.png"))); // NOI18N
        permaCard1.setEnabled(false);
        permaCard1.setName("0"); // NOI18N
        permaCard1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                permaCard1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                permaCard1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                permaCard1MouseExited(evt);
            }
        });
        permaCardPane.add(permaCard1);

        permaCard2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/EattackP.png"))); // NOI18N
        permaCard2.setEnabled(false);
        permaCard2.setName("0"); // NOI18N
        permaCard2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                permaCard2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                permaCard2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                permaCard2MouseExited(evt);
            }
        });
        permaCardPane.add(permaCard2);

        permaCard3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/EattackP.png"))); // NOI18N
        permaCard3.setEnabled(false);
        permaCard3.setName("0"); // NOI18N
        permaCard3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                permaCard3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                permaCard3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                permaCard3MouseExited(evt);
            }
        });
        permaCardPane.add(permaCard3);

        permaCard4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/EattackP.png"))); // NOI18N
        permaCard4.setEnabled(false);
        permaCard4.setName("0"); // NOI18N
        permaCard4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                permaCard4MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                permaCard4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                permaCard4MouseExited(evt);
            }
        });
        permaCardPane.add(permaCard4);

        permaCard5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/EbuildP.png"))); // NOI18N
        permaCard5.setEnabled(false);
        permaCard5.setName("0"); // NOI18N
        permaCard5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                permaCard5MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                permaCard5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                permaCard5MouseExited(evt);
            }
        });
        permaCardPane.add(permaCard5);

        permaCard6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/EattackP.png"))); // NOI18N
        permaCard6.setEnabled(false);
        permaCard6.setName("0"); // NOI18N
        permaCard6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                permaCard6MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                permaCard6MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                permaCard6MouseExited(evt);
            }
        });
        permaCardPane.add(permaCard6);

        permaCard7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/EattackP.png"))); // NOI18N
        permaCard7.setEnabled(false);
        permaCard7.setName("0"); // NOI18N
        permaCard7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                permaCard7MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                permaCard7MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                permaCard7MouseExited(evt);
            }
        });
        permaCardPane.add(permaCard7);

        currAge.setText("jLabel1");

        cardLeftAge.setText("jLabel2");
        cardLeftAge.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout agePaneLayout = new javax.swing.GroupLayout(agePane);
        agePane.setLayout(agePaneLayout);
        agePaneLayout.setHorizontalGroup(
            agePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agePaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(agePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currAge)
                    .addComponent(cardLeftAge))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        agePaneLayout.setVerticalGroup(
            agePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agePaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(currAge)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(cardLeftAge)
                .addContainerGap())
        );

        permaCardPane.add(agePane);

        jScrollPane1.setViewportView(permaCardPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 378;
        gridBagConstraints.ipady = 278;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        permaCardDialog.getContentPane().add(jScrollPane1, gridBagConstraints);

        handCardDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        handCardDialog.setPreferredSize(new java.awt.Dimension(723, 520));
        handCardDialog.setType(java.awt.Window.Type.UTILITY);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, handCardDialog, org.jdesktop.beansbinding.ELProperty.create("${preferredSize}"), handCardDialog, org.jdesktop.beansbinding.BeanProperty.create("minimumSize"));
        bindingGroup.addBinding(binding);

        handCardDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                handCardDialogWindowClosing(evt);
            }
        });
        handCardDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        handCardPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Hand Card"));
        handCardPane.setPreferredSize(new java.awt.Dimension(703, 470));
        java.awt.FlowLayout flowLayout2 = new java.awt.FlowLayout();
        flowLayout2.setAlignOnBaseline(true);
        handCardPane.setLayout(flowLayout2);

        handCard1.setEnabled(false);
        handCard1.setName("0"); // NOI18N
        handCard1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                handCard1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                handCard1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                handCard1MouseExited(evt);
            }
        });
        handCardPane.add(handCard1);

        handCard2.setEnabled(false);
        handCard2.setName("0"); // NOI18N
        handCard2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                handCard2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                handCard2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                handCard2MouseExited(evt);
            }
        });
        handCardPane.add(handCard2);

        handCard3.setEnabled(false);
        handCard3.setName("0"); // NOI18N
        handCard3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                handCard3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                handCard3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                handCard3MouseExited(evt);
            }
        });
        handCardPane.add(handCard3);

        handCard4.setEnabled(false);
        handCard4.setName("0"); // NOI18N
        handCard4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                handCard4MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                handCard4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                handCard4MouseExited(evt);
            }
        });
        handCardPane.add(handCard4);

        handCard5.setEnabled(false);
        handCard5.setName("0"); // NOI18N
        handCard5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                handCard5MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                handCard5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                handCard5MouseExited(evt);
            }
        });
        handCardPane.add(handCard5);

        handCard6.setEnabled(false);
        handCard6.setName("0"); // NOI18N
        handCard6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                handCard6MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                handCard6MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                handCard6MouseExited(evt);
            }
        });
        handCardPane.add(handCard6);

        handCard7.setEnabled(false);
        handCard7.setName("0"); // NOI18N
        handCard7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                handCard7MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                handCard7MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                handCard7MouseExited(evt);
            }
        });
        handCardPane.add(handCard7);

        handCard8.setEnabled(false);
        handCard8.setName("0"); // NOI18N
        handCard8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                handCard8MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                handCard8MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                handCard8MouseExited(evt);
            }
        });
        handCardPane.add(handCard8);

        handCard9.setEnabled(false);
        handCard9.setName("0"); // NOI18N
        handCard9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                handCard9MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                handCard9MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                handCard9MouseExited(evt);
            }
        });
        handCardPane.add(handCard9);

        handCard10.setEnabled(false);
        handCard10.setName("0"); // NOI18N
        handCard10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                handCard10MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                handCard10MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                handCard10MouseExited(evt);
            }
        });
        handCardPane.add(handCard10);

        jScrollPane2.setViewportView(handCardPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 378;
        gridBagConstraints.ipady = 278;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        handCardDialog.getContentPane().add(jScrollPane2, gridBagConstraints);

        typeSelectDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        typeSelectDialog.setMinimumSize(new java.awt.Dimension(386, 91));
        typeSelectDialog.setResizable(false);
        typeSelectDialog.setType(java.awt.Window.Type.UTILITY);
        typeSelectDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                typeSelectDialogWindowClosed(evt);
            }
        });

        cultureSelection1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Please Choose a Culture", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        cultureSelection1.setPreferredSize(new java.awt.Dimension(400, 61));

        goldCube.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rsz_rsz_cube_golden.png"))); // NOI18N
        goldCube.setText("Gold");
        goldCube.setFocusPainted(false);
        goldCube.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goldCubeActionPerformed(evt);
            }
        });

        favorCube.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rsz_rsz_cube_blue.png"))); // NOI18N
        favorCube.setText("Favor");
        favorCube.setFocusPainted(false);
        favorCube.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                favorCubeActionPerformed(evt);
            }
        });

        foodCube.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rsz_rsz_cube_green.png"))); // NOI18N
        foodCube.setText("Food");
        foodCube.setFocusPainted(false);
        foodCube.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foodCubeActionPerformed(evt);
            }
        });

        woodCube.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rsz_rsz_cube_orange.png"))); // NOI18N
        woodCube.setText("Wood");
        woodCube.setFocusPainted(false);
        woodCube.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                woodCubeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout cultureSelection1Layout = new javax.swing.GroupLayout(cultureSelection1);
        cultureSelection1.setLayout(cultureSelection1Layout);
        cultureSelection1Layout.setHorizontalGroup(
            cultureSelection1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cultureSelection1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(favorCube)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(foodCube)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(woodCube)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(goldCube)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        cultureSelection1Layout.setVerticalGroup(
            cultureSelection1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(favorCube)
            .addComponent(foodCube)
            .addComponent(woodCube)
            .addComponent(goldCube)
        );
        cultureSelection1.setLayer(goldCube, javax.swing.JLayeredPane.DEFAULT_LAYER);
        cultureSelection1.setLayer(favorCube, javax.swing.JLayeredPane.DEFAULT_LAYER);
        cultureSelection1.setLayer(foodCube, javax.swing.JLayeredPane.DEFAULT_LAYER);
        cultureSelection1.setLayer(woodCube, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout typeSelectDialogLayout = new javax.swing.GroupLayout(typeSelectDialog.getContentPane());
        typeSelectDialog.getContentPane().setLayout(typeSelectDialogLayout);
        typeSelectDialogLayout.setHorizontalGroup(
            typeSelectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cultureSelection1, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
        );
        typeSelectDialogLayout.setVerticalGroup(
            typeSelectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cultureSelection1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        tradeDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        tradeDialog.setMinimumSize(new java.awt.Dimension(658, 129));
        tradeDialog.setType(java.awt.Window.Type.UTILITY);
        tradeDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                tradeDialogWindowClosed(evt);
            }
        });
        tradeDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        mainScrollPane2.setMinimumSize(new java.awt.Dimension(643, 97));

        tradePane.setBorder(javax.swing.BorderFactory.createTitledBorder("Trade"));
        tradePane.setMinimumSize(new java.awt.Dimension(640, 94));

        tradeSlider.setMaximum(50);
        tradeSlider.setMinimum(-50);
        tradeSlider.setValue(0);

        cubeLeft.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Favor", "Food", "Wood", "Gold" }));

        cubeRight.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Favor", "Food", "Wood", "Gold" }));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, tradeSlider, org.jdesktop.beansbinding.ELProperty.create("${-value}"), cubeLeftNum, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, tradeSlider, org.jdesktop.beansbinding.ELProperty.create("${value}"), cubeRightNum, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        conform.setText("Trade");
        conform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conformActionPerformed(evt);
            }
        });

        consume.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Favor", "Food", "Wood", "Gold" }));

        javax.swing.GroupLayout tradePaneLayout = new javax.swing.GroupLayout(tradePane);
        tradePane.setLayout(tradePaneLayout);
        tradePaneLayout.setHorizontalGroup(
            tradePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tradePaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tradePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tradeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(tradePaneLayout.createSequentialGroup()
                        .addComponent(cubeLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cubeLeftNum, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(177, 177, 177)
                        .addComponent(conform)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(consume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cubeRightNum, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cubeRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))))
        );
        tradePaneLayout.setVerticalGroup(
            tradePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tradePaneLayout.createSequentialGroup()
                .addGroup(tradePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tradePaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(tradePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cubeLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cubeRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cubeLeftNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cubeRightNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(tradePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(conform)
                        .addComponent(consume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tradeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        tradePane.setLayer(tradeSlider, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tradePane.setLayer(cubeLeft, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tradePane.setLayer(cubeRight, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tradePane.setLayer(cubeLeftNum, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tradePane.setLayer(cubeRightNum, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tradePane.setLayer(conform, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tradePane.setLayer(consume, javax.swing.JLayeredPane.DEFAULT_LAYER);

        mainScrollPane2.setViewportView(tradePane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 378;
        gridBagConstraints.ipady = 278;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        tradeDialog.getContentPane().add(mainScrollPane2, gridBagConstraints);

        buildDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        buildDialog.setMinimumSize(new java.awt.Dimension(658, 129));
        buildDialog.setType(java.awt.Window.Type.UTILITY);
        buildDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                buildDialogWindowClosed(evt);
            }
        });
        buildDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        mainScrollPane3.setMinimumSize(new java.awt.Dimension(217, 278));

        buildPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Buildings"));
        buildPane.setMinimumSize(new java.awt.Dimension(214, 75));

        buildingsBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Armory", "WoodWork", "Market", "House", "Monument", "Granary", "StoreHouse", "SiegeEngine", "GreatTemple", "Wall", "Wonder", "GoldMint", "Quarry", "Tower" }));

        buildButton.setText("Build");
        buildButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buildPaneLayout = new javax.swing.GroupLayout(buildPane);
        buildPane.setLayout(buildPaneLayout);
        buildPaneLayout.setHorizontalGroup(
            buildPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buildPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buildingsBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buildButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        buildPaneLayout.setVerticalGroup(
            buildPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buildPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buildPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buildingsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buildButton))
                .addGap(0, 492, Short.MAX_VALUE))
        );
        buildPane.setLayer(buildingsBox, javax.swing.JLayeredPane.DEFAULT_LAYER);
        buildPane.setLayer(buildButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        mainScrollPane3.setViewportView(buildPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 378;
        gridBagConstraints.ipady = 278;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buildDialog.getContentPane().add(mainScrollPane3, gridBagConstraints);

        battleCardDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        battleCardDialog.setMinimumSize(new java.awt.Dimension(723, 520));
        battleCardDialog.setType(java.awt.Window.Type.UTILITY);
        battleCardDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                battleCardDialogWindowClosing(evt);
            }
        });
        battleCardDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        battleCardPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Battle Unit"));
        battleCardPane.setPreferredSize(new java.awt.Dimension(703, 470));
        java.awt.FlowLayout flowLayout3 = new java.awt.FlowLayout();
        flowLayout3.setAlignOnBaseline(true);
        battleCardPane.setLayout(flowLayout3);

        battleUnit1.setEnabled(false);
        battleUnit1.setName("0"); // NOI18N
        battleUnit1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                battleUnit1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                battleUnit1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                battleUnit1MouseExited(evt);
            }
        });
        battleCardPane.add(battleUnit1);

        battleUnit2.setEnabled(false);
        battleUnit2.setName("0"); // NOI18N
        battleUnit2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                battleUnit2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                battleUnit2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                battleUnit2MouseExited(evt);
            }
        });
        battleCardPane.add(battleUnit2);

        battleUnit3.setEnabled(false);
        battleUnit3.setName("0"); // NOI18N
        battleUnit3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                battleUnit3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                battleUnit3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                battleUnit3MouseExited(evt);
            }
        });
        battleCardPane.add(battleUnit3);

        battleUnit4.setEnabled(false);
        battleUnit4.setName("0"); // NOI18N
        battleUnit4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                battleUnit4MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                battleUnit4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                battleUnit4MouseExited(evt);
            }
        });
        battleCardPane.add(battleUnit4);

        battleUnit5.setEnabled(false);
        battleUnit5.setName("0"); // NOI18N
        battleUnit5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                battleUnit5MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                battleUnit5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                battleUnit5MouseExited(evt);
            }
        });
        battleCardPane.add(battleUnit5);

        battleUnit6.setEnabled(false);
        battleUnit6.setName("0"); // NOI18N
        battleUnit6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                battleUnit6MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                battleUnit6MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                battleUnit6MouseExited(evt);
            }
        });
        battleCardPane.add(battleUnit6);

        battleUnit7.setEnabled(false);
        battleUnit7.setName("0"); // NOI18N
        battleUnit7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                battleUnit7MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                battleUnit7MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                battleUnit7MouseExited(evt);
            }
        });
        battleCardPane.add(battleUnit7);

        battleUnit8.setEnabled(false);
        battleUnit8.setName("0"); // NOI18N
        battleUnit8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                battleUnit8MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                battleUnit8MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                battleUnit8MouseExited(evt);
            }
        });
        battleCardPane.add(battleUnit8);

        battleUnit9.setEnabled(false);
        battleUnit9.setName("0"); // NOI18N
        battleUnit9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                battleUnit9MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                battleUnit9MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                battleUnit9MouseExited(evt);
            }
        });
        battleCardPane.add(battleUnit9);

        battleUnit10.setEnabled(false);
        battleUnit10.setName("0"); // NOI18N
        battleUnit10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                battleUnit10MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                battleUnit10MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                battleUnit10MouseExited(evt);
            }
        });
        battleCardPane.add(battleUnit10);

        battleUnit11.setEnabled(false);
        battleUnit11.setName("0"); // NOI18N
        battleUnit11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                battleUnit11MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                battleUnit11MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                battleUnit11MouseExited(evt);
            }
        });
        battleCardPane.add(battleUnit11);

        battleUnit12.setEnabled(false);
        battleUnit12.setName("0"); // NOI18N
        battleUnit12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                battleUnit12MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                battleUnit12MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                battleUnit12MouseExited(evt);
            }
        });
        battleCardPane.add(battleUnit12);

        recruit.setText("Recruit");
        recruit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recruitActionPerformed(evt);
            }
        });
        battleCardPane.add(recruit);

        jScrollPane3.setViewportView(battleCardPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 378;
        gridBagConstraints.ipady = 278;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        battleCardDialog.getContentPane().add(jScrollPane3, gridBagConstraints);

        battleUnitDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        battleUnitDialog.setMinimumSize(new java.awt.Dimension(723, 520));
        battleUnitDialog.setType(java.awt.Window.Type.UTILITY);
        battleUnitDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                battleUnitDialogWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                battleUnitDialogWindowClosing(evt);
            }
        });
        battleUnitDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        battleUnitPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Battle Unit"));
        battleUnitPane.setPreferredSize(new java.awt.Dimension(703, 470));
        java.awt.FlowLayout flowLayout4 = new java.awt.FlowLayout();
        flowLayout4.setAlignOnBaseline(true);
        battleUnitPane.setLayout(flowLayout4);

        playerUnit1.setEnabled(false);
        playerUnit1.setName("0"); // NOI18N
        playerUnit1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playerUnit1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                playerUnit1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                playerUnit1MouseExited(evt);
            }
        });
        battleUnitPane.add(playerUnit1);

        playerUnit2.setEnabled(false);
        playerUnit2.setName("0"); // NOI18N
        playerUnit2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playerUnit2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                playerUnit2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                playerUnit2MouseExited(evt);
            }
        });
        battleUnitPane.add(playerUnit2);

        playerUnit3.setEnabled(false);
        playerUnit3.setName("0"); // NOI18N
        playerUnit3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playerUnit3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                playerUnit3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                playerUnit3MouseExited(evt);
            }
        });
        battleUnitPane.add(playerUnit3);

        playerUnit4.setEnabled(false);
        playerUnit4.setName("0"); // NOI18N
        playerUnit4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playerUnit4MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                playerUnit4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                playerUnit4MouseExited(evt);
            }
        });
        battleUnitPane.add(playerUnit4);

        playerUnit5.setEnabled(false);
        playerUnit5.setName("0"); // NOI18N
        playerUnit5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playerUnit5MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                playerUnit5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                playerUnit5MouseExited(evt);
            }
        });
        battleUnitPane.add(playerUnit5);

        playerUnit6.setEnabled(false);
        playerUnit6.setName("0"); // NOI18N
        playerUnit6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playerUnit6MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                playerUnit6MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                playerUnit6MouseExited(evt);
            }
        });
        battleUnitPane.add(playerUnit6);

        playerUnit7.setEnabled(false);
        playerUnit7.setName("0"); // NOI18N
        playerUnit7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playerUnit7MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                playerUnit7MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                playerUnit7MouseExited(evt);
            }
        });
        battleUnitPane.add(playerUnit7);

        playerUnit8.setEnabled(false);
        playerUnit8.setName("0"); // NOI18N
        playerUnit8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playerUnit8MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                playerUnit8MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                playerUnit8MouseExited(evt);
            }
        });
        battleUnitPane.add(playerUnit8);

        playerUnit9.setEnabled(false);
        playerUnit9.setName("0"); // NOI18N
        playerUnit9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playerUnit9MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                playerUnit9MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                playerUnit9MouseExited(evt);
            }
        });
        battleUnitPane.add(playerUnit9);

        playerUnit10.setEnabled(false);
        playerUnit10.setName("0"); // NOI18N
        playerUnit10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playerUnit10MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                playerUnit10MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                playerUnit10MouseExited(evt);
            }
        });
        battleUnitPane.add(playerUnit10);

        playerUnit11.setEnabled(false);
        playerUnit11.setName("0"); // NOI18N
        playerUnit11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playerUnit11MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                playerUnit11MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                playerUnit11MouseExited(evt);
            }
        });
        battleUnitPane.add(playerUnit11);

        playerUnit12.setEnabled(false);
        playerUnit12.setName("0"); // NOI18N
        playerUnit12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playerUnit12MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                playerUnit12MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                playerUnit12MouseExited(evt);
            }
        });
        battleUnitPane.add(playerUnit12);

        jScrollPane4.setViewportView(battleUnitPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 378;
        gridBagConstraints.ipady = 278;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        battleUnitDialog.getContentPane().add(jScrollPane4, gridBagConstraints);

        tradeDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        tradeDialog1.setMinimumSize(new java.awt.Dimension(658, 129));
        tradeDialog1.setType(java.awt.Window.Type.UTILITY);
        tradeDialog1.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                tradeDialog1WindowClosed(evt);
            }
        });
        tradeDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        mainScrollPane4.setMinimumSize(new java.awt.Dimension(643, 97));

        tradePane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Trade"));
        tradePane1.setMinimumSize(new java.awt.Dimension(640, 94));

        tradeSlider1.setMaximum(50);
        tradeSlider1.setMinimum(-50);
        tradeSlider1.setValue(0);

        cubeLeft1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Favor", "Food", "Wood", "Gold" }));

        cubeRight1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Favor", "Food", "Wood", "Gold" }));

        conform1.setText("Trade");
        conform1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conform1ActionPerformed(evt);
            }
        });

        consume1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Favor", "Food", "Wood", "Gold" }));

        javax.swing.GroupLayout tradePane1Layout = new javax.swing.GroupLayout(tradePane1);
        tradePane1.setLayout(tradePane1Layout);
        tradePane1Layout.setHorizontalGroup(
            tradePane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tradePane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tradePane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tradeSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(tradePane1Layout.createSequentialGroup()
                        .addComponent(cubeLeft1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cubeLeftNum1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(177, 177, 177)
                        .addComponent(conform1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(consume1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cubeRightNum1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cubeRight1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))))
        );
        tradePane1Layout.setVerticalGroup(
            tradePane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tradePane1Layout.createSequentialGroup()
                .addGroup(tradePane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tradePane1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(tradePane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cubeLeft1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cubeRight1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cubeLeftNum1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cubeRightNum1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(tradePane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(conform1)
                        .addComponent(consume1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tradeSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        tradePane1.setLayer(tradeSlider1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tradePane1.setLayer(cubeLeft1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tradePane1.setLayer(cubeRight1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tradePane1.setLayer(cubeLeftNum1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tradePane1.setLayer(cubeRightNum1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tradePane1.setLayer(conform1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tradePane1.setLayer(consume1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        mainScrollPane4.setViewportView(tradePane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 378;
        gridBagConstraints.ipady = 278;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        tradeDialog1.getContentPane().add(mainScrollPane4, gridBagConstraints);

        tradeDialog2.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        tradeDialog2.setMinimumSize(new java.awt.Dimension(658, 129));
        tradeDialog2.setType(java.awt.Window.Type.UTILITY);
        tradeDialog2.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                tradeDialog2WindowClosed(evt);
            }
        });
        tradeDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        mainScrollPane5.setMinimumSize(new java.awt.Dimension(643, 97));

        tradePane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Trade"));
        tradePane2.setMinimumSize(new java.awt.Dimension(640, 94));

        tradeSlider2.setMaximum(50);
        tradeSlider2.setMinimum(-50);
        tradeSlider2.setValue(0);

        cubeLeft2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Favor", "Food", "Wood", "Gold" }));

        cubeRight2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Favor", "Food", "Wood", "Gold" }));

        conform2.setText("Trade");
        conform2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conform2ActionPerformed(evt);
            }
        });

        consume2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Favor", "Food", "Wood", "Gold" }));

        javax.swing.GroupLayout tradePane2Layout = new javax.swing.GroupLayout(tradePane2);
        tradePane2.setLayout(tradePane2Layout);
        tradePane2Layout.setHorizontalGroup(
            tradePane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tradePane2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tradePane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tradeSlider2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(tradePane2Layout.createSequentialGroup()
                        .addComponent(cubeLeft2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cubeLeftNum2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(177, 177, 177)
                        .addComponent(conform2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(consume2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cubeRightNum2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cubeRight2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))))
        );
        tradePane2Layout.setVerticalGroup(
            tradePane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tradePane2Layout.createSequentialGroup()
                .addGroup(tradePane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tradePane2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(tradePane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cubeLeft2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cubeRight2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cubeLeftNum2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cubeRightNum2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(tradePane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(conform2)
                        .addComponent(consume2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tradeSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        tradePane2.setLayer(tradeSlider2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tradePane2.setLayer(cubeLeft2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tradePane2.setLayer(cubeRight2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tradePane2.setLayer(cubeLeftNum2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tradePane2.setLayer(cubeRightNum2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tradePane2.setLayer(conform2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tradePane2.setLayer(consume2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        mainScrollPane5.setViewportView(tradePane2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 378;
        gridBagConstraints.ipady = 278;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        tradeDialog2.getContentPane().add(mainScrollPane5, gridBagConstraints);

        buildDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        buildDialog1.setMinimumSize(new java.awt.Dimension(658, 129));
        buildDialog1.setType(java.awt.Window.Type.UTILITY);
        buildDialog1.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                buildDialog1WindowClosed(evt);
            }
        });
        buildDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        mainScrollPane6.setMinimumSize(new java.awt.Dimension(217, 278));

        buildPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Buildings"));
        buildPane1.setMinimumSize(new java.awt.Dimension(214, 75));

        buildingsBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Armory", "WoodWork", "Market", "House", "Monument", "Granary", "StoreHouse", "SiegeEngine", "GreatTemple", "Wall", "Wonder", "GoldMint", "Quarry", "Tower" }));

        buildButton1.setText("Build");
        buildButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buildPane1Layout = new javax.swing.GroupLayout(buildPane1);
        buildPane1.setLayout(buildPane1Layout);
        buildPane1Layout.setHorizontalGroup(
            buildPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buildPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buildingsBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buildButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        buildPane1Layout.setVerticalGroup(
            buildPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buildPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buildPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buildingsBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buildButton1))
                .addGap(0, 770, Short.MAX_VALUE))
        );
        buildPane1.setLayer(buildingsBox1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        buildPane1.setLayer(buildButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        mainScrollPane6.setViewportView(buildPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 378;
        gridBagConstraints.ipady = 278;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buildDialog1.getContentPane().add(mainScrollPane6, gridBagConstraints);

        typeSelectDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        typeSelectDialog1.setMinimumSize(new java.awt.Dimension(386, 91));
        typeSelectDialog1.setResizable(false);
        typeSelectDialog1.setType(java.awt.Window.Type.UTILITY);
        typeSelectDialog1.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                typeSelectDialog1WindowClosed(evt);
            }
        });

        cultureSelection2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Please Choose a Culture", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        cultureSelection2.setPreferredSize(new java.awt.Dimension(400, 61));

        goldCube1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rsz_rsz_cube_golden.png"))); // NOI18N
        goldCube1.setText("Gold");
        goldCube1.setFocusPainted(false);
        goldCube1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goldCube1ActionPerformed(evt);
            }
        });

        favorCube1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rsz_rsz_cube_blue.png"))); // NOI18N
        favorCube1.setText("Favor");
        favorCube1.setFocusPainted(false);
        favorCube1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                favorCube1ActionPerformed(evt);
            }
        });

        foodCube1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rsz_rsz_cube_green.png"))); // NOI18N
        foodCube1.setText("Food");
        foodCube1.setFocusPainted(false);
        foodCube1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foodCube1ActionPerformed(evt);
            }
        });

        woodCube1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rsz_rsz_cube_orange.png"))); // NOI18N
        woodCube1.setText("Wood");
        woodCube1.setFocusPainted(false);
        woodCube1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                woodCube1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout cultureSelection2Layout = new javax.swing.GroupLayout(cultureSelection2);
        cultureSelection2.setLayout(cultureSelection2Layout);
        cultureSelection2Layout.setHorizontalGroup(
            cultureSelection2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cultureSelection2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(favorCube1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(foodCube1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(woodCube1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(goldCube1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        cultureSelection2Layout.setVerticalGroup(
            cultureSelection2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(favorCube1)
            .addComponent(foodCube1)
            .addComponent(woodCube1)
            .addComponent(goldCube1)
        );
        cultureSelection2.setLayer(goldCube1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        cultureSelection2.setLayer(favorCube1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        cultureSelection2.setLayer(foodCube1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        cultureSelection2.setLayer(woodCube1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout typeSelectDialog1Layout = new javax.swing.GroupLayout(typeSelectDialog1.getContentPane());
        typeSelectDialog1.getContentPane().setLayout(typeSelectDialog1Layout);
        typeSelectDialog1Layout.setHorizontalGroup(
            typeSelectDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cultureSelection2, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
        );
        typeSelectDialog1Layout.setVerticalGroup(
            typeSelectDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cultureSelection2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        aiBattleSelect.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        aiBattleSelect.setMinimumSize(new java.awt.Dimension(386, 91));
        aiBattleSelect.setResizable(false);
        aiBattleSelect.setType(java.awt.Window.Type.UTILITY);
        aiBattleSelect.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                aiBattleSelectWindowClosed(evt);
            }
        });

        cultureSelection3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Please Choose a Culture", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        cultureSelection3.setPreferredSize(new java.awt.Dimension(400, 61));

        toAI1.setText("AI Player 1");
        toAI1.setFocusPainted(false);
        toAI1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toAI1ActionPerformed(evt);
            }
        });

        toAI2.setText("AI Player 2");
        toAI2.setFocusPainted(false);
        toAI2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toAI2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout cultureSelection3Layout = new javax.swing.GroupLayout(cultureSelection3);
        cultureSelection3.setLayout(cultureSelection3Layout);
        cultureSelection3Layout.setHorizontalGroup(
            cultureSelection3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cultureSelection3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(toAI1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toAI2)
                .addContainerGap(160, Short.MAX_VALUE))
        );
        cultureSelection3Layout.setVerticalGroup(
            cultureSelection3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toAI1)
            .addComponent(toAI2)
        );
        cultureSelection3.setLayer(toAI1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        cultureSelection3.setLayer(toAI2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout aiBattleSelectLayout = new javax.swing.GroupLayout(aiBattleSelect.getContentPane());
        aiBattleSelect.getContentPane().setLayout(aiBattleSelectLayout);
        aiBattleSelectLayout.setHorizontalGroup(
            aiBattleSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cultureSelection3, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
        );
        aiBattleSelectLayout.setVerticalGroup(
            aiBattleSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cultureSelection3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        destroyBuilding.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                destroyBuildingWindowClosed(evt);
            }
        });
        destroyBuilding.getContentPane().setLayout(new java.awt.GridBagLayout());

        selectPlayer.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Player", "AI1", "AI2" }));
        selectPlayer.setSelectedIndex(-1);
        selectPlayer.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectPlayerItemStateChanged(evt);
            }
        });
        selectPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectPlayerActionPerformed(evt);
            }
        });

        jLabel1.setText("Please select the palyer that you want to eliminate a building");

        jLabel2.setText("Then select which building that you want to destroy");

        remove.setText("Remove");
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectPlayer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jLayeredPane1Layout.createSequentialGroup()
                        .addComponent(selectBuilding, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(remove, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectBuilding, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(remove, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        jLayeredPane1.setLayer(selectPlayer, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(selectBuilding, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(remove, javax.swing.JLayeredPane.DEFAULT_LAYER);

        destroyBuilding.getContentPane().add(jLayeredPane1, new java.awt.GridBagConstraints());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mythology Battle");
        setIconImage(img.getImage());
        setName("mainFrame"); // NOI18N

        mainLayer.setPreferredSize(new java.awt.Dimension(902, 802));
        mainLayer.setLayout(new java.awt.CardLayout());

        norseProductArea.setLayout(new java.awt.GridLayout(4, 4, 5, 5));

        n11.setText("jLabel1");
        n11.setName("fertile"); // NOI18N
        norseProductArea.add(n11);

        n12.setText("jLabel1");
        n12.setName("mountain"); // NOI18N
        norseProductArea.add(n12);

        n13.setText("jLabel1");
        n13.setName("mountain"); // NOI18N
        norseProductArea.add(n13);

        n14.setText("jLabel1");
        n14.setName("mountain"); // NOI18N
        norseProductArea.add(n14);

        n21.setText("jLabel1");
        n21.setName("fertile"); // NOI18N
        norseProductArea.add(n21);

        n22.setText("jLabel1");
        n22.setName("forest"); // NOI18N
        norseProductArea.add(n22);

        n23.setText("jLabel1");
        n23.setName("hill"); // NOI18N
        norseProductArea.add(n23);

        n24.setText("jLabel1");
        n24.setName("mountain"); // NOI18N
        norseProductArea.add(n24);

        n31.setText("jLabel1");
        n31.setName("hill"); // NOI18N
        norseProductArea.add(n31);

        n32.setText("jLabel1");
        n32.setName("swamp"); // NOI18N
        norseProductArea.add(n32);

        n33.setText("jLabel1");
        n33.setName("forest"); // NOI18N
        norseProductArea.add(n33);

        n34.setText("jLabel1");
        n34.setName("hill"); // NOI18N
        norseProductArea.add(n34);

        n41.setText("jLabel1");
        n41.setName("desert"); // NOI18N
        norseProductArea.add(n41);

        n42.setText("jLabel1");
        n42.setName("forest"); // NOI18N
        norseProductArea.add(n42);

        n43.setText("jLabel1");
        n43.setName("forest"); // NOI18N
        norseProductArea.add(n43);

        n44.setText("jLabel1");
        n44.setName("fertile"); // NOI18N
        norseProductArea.add(n44);

        norseCityArea.setLayout(new java.awt.GridLayout(4, 4, 2, 2));

        N11.setText("jLabel1");
        norseCityArea.add(N11);

        N12.setText("jLabel1");
        norseCityArea.add(N12);

        N13.setText("jLabel1");
        norseCityArea.add(N13);

        N14.setText("jLabel1");
        norseCityArea.add(N14);

        N21.setText("jLabel1");
        norseCityArea.add(N21);

        N22.setText("jLabel1");
        norseCityArea.add(N22);

        N23.setText("jLabel1");
        norseCityArea.add(N23);

        N24.setText("jLabel1");
        norseCityArea.add(N24);

        N31.setText("jLabel1");
        norseCityArea.add(N31);

        N32.setText("jLabel1");
        norseCityArea.add(N32);

        N33.setText("jLabel1");
        norseCityArea.add(N33);

        N34.setText("jLabel1");
        norseCityArea.add(N34);

        N41.setText("jLabel1");
        norseCityArea.add(N41);

        N42.setText("jLabel1");
        norseCityArea.add(N42);

        N43.setText("jLabel1");
        norseCityArea.add(N43);

        N44.setText("jLabel1");
        norseCityArea.add(N44);

        javax.swing.GroupLayout norseGridLayerLayout = new javax.swing.GroupLayout(norseGridLayer);
        norseGridLayer.setLayout(norseGridLayerLayout);
        norseGridLayerLayout.setHorizontalGroup(
            norseGridLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(norseGridLayerLayout.createSequentialGroup()
                .addComponent(norseProductArea, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(norseCityArea, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE))
        );
        norseGridLayerLayout.setVerticalGroup(
            norseGridLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(norseProductArea, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
            .addComponent(norseCityArea)
        );
        norseGridLayer.setLayer(norseProductArea, javax.swing.JLayeredPane.DEFAULT_LAYER);
        norseGridLayer.setLayer(norseCityArea, javax.swing.JLayeredPane.DEFAULT_LAYER);

        norseBackLayer.setLayout(new java.awt.GridBagLayout());

        norseBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mythologybattle/resource/NorseBoard9x7.png"))); // NOI18N
        norseBackLayer.add(norseBackground, new java.awt.GridBagConstraints());

        javax.swing.GroupLayout norseLayerLayout = new javax.swing.GroupLayout(norseLayer);
        norseLayer.setLayout(norseLayerLayout);
        norseLayerLayout.setHorizontalGroup(
            norseLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(norseBackLayer, javax.swing.GroupLayout.DEFAULT_SIZE, 901, Short.MAX_VALUE)
            .addGroup(norseLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(norseLayerLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(norseGridLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        norseLayerLayout.setVerticalGroup(
            norseLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(norseBackLayer, javax.swing.GroupLayout.DEFAULT_SIZE, 802, Short.MAX_VALUE)
            .addGroup(norseLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, norseLayerLayout.createSequentialGroup()
                    .addContainerGap(403, Short.MAX_VALUE)
                    .addComponent(norseGridLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(9, 9, 9)))
        );
        norseLayer.setLayer(norseGridLayer, javax.swing.JLayeredPane.DEFAULT_LAYER);
        norseLayer.setLayer(norseBackLayer, javax.swing.JLayeredPane.DEFAULT_LAYER);

        mainLayer.add(norseLayer, "card2");

        greekProductArea.setLayout(new java.awt.GridLayout(4, 4, 5, 5));

        g11.setText("jLabel1");
        g11.setName("fertile"); // NOI18N
        greekProductArea.add(g11);

        g44.setText("jLabel1");
        g44.setName("fertile"); // NOI18N
        greekProductArea.add(g44);

        g43.setText("jLabel1");
        g43.setName("forest"); // NOI18N
        greekProductArea.add(g43);

        g42.setText("jLabel1");
        g42.setName("swamp"); // NOI18N
        greekProductArea.add(g42);

        g41.setText("jLabel1");
        g41.setName("hill"); // NOI18N
        greekProductArea.add(g41);

        g34.setText("jLabel1");
        g34.setName("mountain"); // NOI18N
        greekProductArea.add(g34);

        g33.setText("jLabel1");
        g33.setName("fertile"); // NOI18N
        greekProductArea.add(g33);

        g32.setText("jLabel1");
        g32.setName("forest"); // NOI18N
        greekProductArea.add(g32);

        g31.setText("jLabel1");
        g31.setName("hill"); // NOI18N
        greekProductArea.add(g31);

        g24.setText("jLabel1");
        g24.setName("hill"); // NOI18N
        greekProductArea.add(g24);

        g23.setText("jLabel1");
        g23.setName("hill"); // NOI18N
        greekProductArea.add(g23);

        g22.setText("jLabel1");
        g22.setName("hill"); // NOI18N
        greekProductArea.add(g22);

        g21.setText("jLabel1");
        g21.setName("desert"); // NOI18N
        greekProductArea.add(g21);

        g14.setText("jLabel1");
        g14.setName("hill"); // NOI18N
        greekProductArea.add(g14);

        g13.setText("jLabel1");
        g13.setName("hill"); // NOI18N
        greekProductArea.add(g13);

        g12.setText("jLabel1");
        g12.setName("hill"); // NOI18N
        greekProductArea.add(g12);

        greekCityArea.setLayout(new java.awt.GridLayout(4, 4, 5, 5));

        G22.setText("jLabel1");
        greekCityArea.add(G22);

        G33.setText("jLabel1");
        greekCityArea.add(G33);

        G32.setText("jLabel1");
        greekCityArea.add(G32);

        G31.setText("jLabel1");
        greekCityArea.add(G31);

        G34.setText("jLabel1");
        greekCityArea.add(G34);

        G11.setText("jLabel1");
        greekCityArea.add(G11);

        G14.setText("jLabel1");
        greekCityArea.add(G14);

        G12.setText("jLabel1");
        greekCityArea.add(G12);

        G21.setText("jLabel1");
        greekCityArea.add(G21);

        G23.setText("jLabel1");
        greekCityArea.add(G23);

        G13.setText("jLabel1");
        greekCityArea.add(G13);

        G24.setText("jLabel1");
        greekCityArea.add(G24);

        G41.setText("jLabel1");
        greekCityArea.add(G41);

        G42.setText("jLabel1");
        greekCityArea.add(G42);

        G43.setText("jLabel1");
        greekCityArea.add(G43);

        G44.setText("jLabel1");
        greekCityArea.add(G44);

        javax.swing.GroupLayout greekGridLayerLayout = new javax.swing.GroupLayout(greekGridLayer);
        greekGridLayer.setLayout(greekGridLayerLayout);
        greekGridLayerLayout.setHorizontalGroup(
            greekGridLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(greekGridLayerLayout.createSequentialGroup()
                .addComponent(greekProductArea, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(greekCityArea, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        greekGridLayerLayout.setVerticalGroup(
            greekGridLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(greekCityArea, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
            .addComponent(greekProductArea)
        );
        greekGridLayer.setLayer(greekProductArea, javax.swing.JLayeredPane.DEFAULT_LAYER);
        greekGridLayer.setLayer(greekCityArea, javax.swing.JLayeredPane.DEFAULT_LAYER);

        greekBackLayer.setLayout(new java.awt.GridBagLayout());

        greekBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mythologybattle/resource/GreekBoard9x7.png"))); // NOI18N
        greekBackLayer.add(greekBackground, new java.awt.GridBagConstraints());

        javax.swing.GroupLayout greekLayerLayout = new javax.swing.GroupLayout(greekLayer);
        greekLayer.setLayout(greekLayerLayout);
        greekLayerLayout.setHorizontalGroup(
            greekLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 902, Short.MAX_VALUE)
            .addGroup(greekLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(greekLayerLayout.createSequentialGroup()
                    .addGap(7, 7, 7)
                    .addComponent(greekGridLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(15, Short.MAX_VALUE)))
            .addGroup(greekLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(greekLayerLayout.createSequentialGroup()
                    .addComponent(greekBackLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        greekLayerLayout.setVerticalGroup(
            greekLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 802, Short.MAX_VALUE)
            .addGroup(greekLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, greekLayerLayout.createSequentialGroup()
                    .addContainerGap(405, Short.MAX_VALUE)
                    .addComponent(greekGridLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(7, 7, 7)))
            .addGroup(greekLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(greekLayerLayout.createSequentialGroup()
                    .addComponent(greekBackLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        greekLayer.setLayer(greekGridLayer, javax.swing.JLayeredPane.DEFAULT_LAYER);
        greekLayer.setLayer(greekBackLayer, javax.swing.JLayeredPane.DEFAULT_LAYER);

        mainLayer.add(greekLayer, "card3");

        egyptProductArea.setLayout(new java.awt.GridLayout(4, 4, 5, 5));

        e41.setText("jLabel1");
        e41.setName("desert"); // NOI18N
        egyptProductArea.add(e41);

        e33.setText("jLabel1");
        e33.setName("desert"); // NOI18N
        egyptProductArea.add(e33);

        e32.setText("jLabel1");
        e32.setName("swamp"); // NOI18N
        egyptProductArea.add(e32);

        e42.setText("jLabel1");
        e42.setName("swamp"); // NOI18N
        egyptProductArea.add(e42);

        e44.setText("jLabel1");
        e44.setName("forest"); // NOI18N
        egyptProductArea.add(e44);

        e43.setText("jLabel1");
        e43.setName("desert"); // NOI18N
        egyptProductArea.add(e43);

        e31.setText("jLabel1");
        e31.setName("fertile"); // NOI18N
        egyptProductArea.add(e31);

        e21.setText("jLabel1");
        e21.setName("fertile"); // NOI18N
        egyptProductArea.add(e21);

        e34.setText("jLabel1");
        e34.setName("desert"); // NOI18N
        egyptProductArea.add(e34);

        e23.setText("jLabel1");
        e23.setName("desert"); // NOI18N
        egyptProductArea.add(e23);

        e24.setText("jLabel1");
        e24.setName("fertile"); // NOI18N
        egyptProductArea.add(e24);

        e22.setText("jLabel1");
        e22.setName("fertile"); // NOI18N
        egyptProductArea.add(e22);

        e14.setText("jLabel1");
        e14.setName("desert"); // NOI18N
        egyptProductArea.add(e14);

        e13.setText("jLabel1");
        e13.setName("hill"); // NOI18N
        egyptProductArea.add(e13);

        e12.setText("jLabel1");
        e12.setName("fertile"); // NOI18N
        egyptProductArea.add(e12);

        e11.setText("jLabel1");
        e11.setName("hill"); // NOI18N
        egyptProductArea.add(e11);

        egyptCityArea.setLayout(new java.awt.GridLayout(4, 4, 5, 5));

        E44.setText("jLabel1");
        egyptCityArea.add(E44);

        E43.setText("jLabel1");
        egyptCityArea.add(E43);

        E42.setText("jLabel1");
        egyptCityArea.add(E42);

        E41.setText("jLabel1");
        egyptCityArea.add(E41);

        E34.setText("jLabel1");
        egyptCityArea.add(E34);

        E33.setText("jLabel1");
        egyptCityArea.add(E33);

        E32.setText("jLabel1");
        egyptCityArea.add(E32);

        E31.setText("jLabel1");
        egyptCityArea.add(E31);

        E24.setText("jLabel1");
        egyptCityArea.add(E24);

        E23.setText("jLabel1");
        egyptCityArea.add(E23);

        E22.setText("jLabel1");
        egyptCityArea.add(E22);

        E21.setText("jLabel1");
        egyptCityArea.add(E21);

        E14.setText("jLabel1");
        egyptCityArea.add(E14);

        E13.setText("jLabel1");
        egyptCityArea.add(E13);

        E12.setText("jLabel1");
        egyptCityArea.add(E12);

        E11.setText("jLabel1");
        egyptCityArea.add(E11);

        javax.swing.GroupLayout egyptGridLayerLayout = new javax.swing.GroupLayout(egyptGridLayer);
        egyptGridLayer.setLayout(egyptGridLayerLayout);
        egyptGridLayerLayout.setHorizontalGroup(
            egyptGridLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(egyptGridLayerLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(egyptProductArea, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(egyptCityArea, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        egyptGridLayerLayout.setVerticalGroup(
            egyptGridLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(egyptCityArea, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
            .addComponent(egyptProductArea)
        );
        egyptGridLayer.setLayer(egyptProductArea, javax.swing.JLayeredPane.DEFAULT_LAYER);
        egyptGridLayer.setLayer(egyptCityArea, javax.swing.JLayeredPane.DEFAULT_LAYER);

        egyptBackLayer.setLayout(new java.awt.GridBagLayout());

        egyptBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mythologybattle/resource/EgyptBoard9x7.png"))); // NOI18N
        egyptBackLayer.add(egyptBackground, new java.awt.GridBagConstraints());

        javax.swing.GroupLayout egyptLayerLayout = new javax.swing.GroupLayout(egyptLayer);
        egyptLayer.setLayout(egyptLayerLayout);
        egyptLayerLayout.setHorizontalGroup(
            egyptLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 903, Short.MAX_VALUE)
            .addGroup(egyptLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(egyptLayerLayout.createSequentialGroup()
                    .addComponent(egyptGridLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(egyptLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(egyptLayerLayout.createSequentialGroup()
                    .addComponent(egyptBackLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 3, Short.MAX_VALUE)))
        );
        egyptLayerLayout.setVerticalGroup(
            egyptLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 802, Short.MAX_VALUE)
            .addGroup(egyptLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, egyptLayerLayout.createSequentialGroup()
                    .addContainerGap(401, Short.MAX_VALUE)
                    .addComponent(egyptGridLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(9, 9, 9)))
            .addGroup(egyptLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(egyptLayerLayout.createSequentialGroup()
                    .addComponent(egyptBackLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        egyptLayer.setLayer(egyptGridLayer, javax.swing.JLayeredPane.DEFAULT_LAYER);
        egyptLayer.setLayer(egyptBackLayer, javax.swing.JLayeredPane.DEFAULT_LAYER);

        mainLayer.add(egyptLayer, "card4");

        mainActionBar.setRollover(true);
        mainActionBar.setPreferredSize(new java.awt.Dimension(100, 80));

        startButton.setText("START");
        startButton.setFocusable(false);
        startButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        startButton.setMaximumSize(new java.awt.Dimension(70, 28));
        startButton.setMinimumSize(new java.awt.Dimension(70, 28));
        startButton.setPreferredSize(new java.awt.Dimension(70, 28));
        startButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        mainActionBar.add(startButton);

        previousButton.setText("Previous");
        previousButton.setFocusable(false);
        previousButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        previousButton.setMaximumSize(new java.awt.Dimension(70, 28));
        previousButton.setMinimumSize(new java.awt.Dimension(70, 28));
        previousButton.setPreferredSize(new java.awt.Dimension(70, 28));
        previousButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });
        mainActionBar.add(previousButton);

        nextButton.setText("Next");
        nextButton.setFocusable(false);
        nextButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nextButton.setMaximumSize(new java.awt.Dimension(70, 28));
        nextButton.setMinimumSize(new java.awt.Dimension(70, 28));
        nextButton.setPreferredSize(new java.awt.Dimension(70, 28));
        nextButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });
        mainActionBar.add(nextButton);

        handButton.setText("Hand");
        handButton.setFocusable(false);
        handButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        handButton.setMaximumSize(new java.awt.Dimension(70, 28));
        handButton.setMinimumSize(new java.awt.Dimension(70, 28));
        handButton.setPreferredSize(new java.awt.Dimension(70, 28));
        handButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        handButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handButtonActionPerformed(evt);
            }
        });
        mainActionBar.add(handButton);

        unitButton.setText("Unit");
        unitButton.setFocusable(false);
        unitButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        unitButton.setMaximumSize(new java.awt.Dimension(70, 28));
        unitButton.setMinimumSize(new java.awt.Dimension(70, 28));
        unitButton.setPreferredSize(new java.awt.Dimension(70, 28));
        unitButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        unitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitButtonActionPerformed(evt);
            }
        });
        mainActionBar.add(unitButton);

        jButton1.setText("Draw Rcard");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        mainActionBar.add(jButton1);

        jButton2.setText("AI play");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        mainActionBar.add(jButton2);

        scoreLayer.setLayout(new java.awt.GridLayout(3, 1, 5, 5));

        humanScore.setBorder(javax.swing.BorderFactory.createTitledBorder("Human"));

        rCube.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mythologybattle/resource/rsz_cube_red.png"))); // NOI18N

        oCube.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mythologybattle/resource/rsz_cube_orange.png"))); // NOI18N

        bCube.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mythologybattle/resource/rsz_cube_blue.png"))); // NOI18N

        gCube.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mythologybattle/resource/rsz_cube_green.png"))); // NOI18N

        multiP.setText("X");

        multiP2.setText("X");

        multiP3.setText("X");

        multiP4.setText("X");

        hRedCube.setText("0");

        hOrangeCube.setText("0");

        hBlueCube.setText("0");

        hGreenCube.setText("0");

        goCube.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rsz_cube_golden.png"))); // NOI18N

        multiP12.setText("X");

        hGoldenCube.setText("0");

        hCultureLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hCultureLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout humanScoreLayout = new javax.swing.GroupLayout(humanScore);
        humanScore.setLayout(humanScoreLayout);
        humanScoreLayout.setHorizontalGroup(
            humanScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(humanScoreLayout.createSequentialGroup()
                .addComponent(oCube)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(multiP2)
                .addGap(18, 18, 18)
                .addComponent(hOrangeCube)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(humanScoreLayout.createSequentialGroup()
                .addGroup(humanScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(humanScoreLayout.createSequentialGroup()
                        .addComponent(bCube)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(multiP3)
                        .addGap(18, 18, 18)
                        .addComponent(hBlueCube))
                    .addGroup(humanScoreLayout.createSequentialGroup()
                        .addComponent(rCube)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(multiP)
                        .addGap(18, 18, 18)
                        .addComponent(hRedCube))
                    .addGroup(humanScoreLayout.createSequentialGroup()
                        .addComponent(gCube)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(multiP4)
                        .addGap(18, 18, 18)
                        .addComponent(hGreenCube))
                    .addGroup(humanScoreLayout.createSequentialGroup()
                        .addComponent(goCube)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(multiP12)
                        .addGap(18, 18, 18)
                        .addComponent(hGoldenCube))
                    .addComponent(hCultureLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        humanScoreLayout.setVerticalGroup(
            humanScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(humanScoreLayout.createSequentialGroup()
                .addGroup(humanScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rCube)
                    .addGroup(humanScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(multiP)
                        .addComponent(hRedCube)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(humanScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(humanScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(multiP2)
                        .addComponent(hOrangeCube))
                    .addComponent(oCube))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(humanScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bCube, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, humanScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(multiP3)
                        .addComponent(hBlueCube)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(humanScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gCube, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, humanScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(multiP4)
                        .addComponent(hGreenCube)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(humanScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(goCube, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, humanScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(multiP12)
                        .addComponent(hGoldenCube)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(hCultureLabel))
        );
        humanScore.setLayer(rCube, javax.swing.JLayeredPane.DEFAULT_LAYER);
        humanScore.setLayer(oCube, javax.swing.JLayeredPane.DEFAULT_LAYER);
        humanScore.setLayer(bCube, javax.swing.JLayeredPane.DEFAULT_LAYER);
        humanScore.setLayer(gCube, javax.swing.JLayeredPane.DEFAULT_LAYER);
        humanScore.setLayer(multiP, javax.swing.JLayeredPane.DEFAULT_LAYER);
        humanScore.setLayer(multiP2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        humanScore.setLayer(multiP3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        humanScore.setLayer(multiP4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        humanScore.setLayer(hRedCube, javax.swing.JLayeredPane.DEFAULT_LAYER);
        humanScore.setLayer(hOrangeCube, javax.swing.JLayeredPane.DEFAULT_LAYER);
        humanScore.setLayer(hBlueCube, javax.swing.JLayeredPane.DEFAULT_LAYER);
        humanScore.setLayer(hGreenCube, javax.swing.JLayeredPane.DEFAULT_LAYER);
        humanScore.setLayer(goCube, javax.swing.JLayeredPane.DEFAULT_LAYER);
        humanScore.setLayer(multiP12, javax.swing.JLayeredPane.DEFAULT_LAYER);
        humanScore.setLayer(hGoldenCube, javax.swing.JLayeredPane.DEFAULT_LAYER);
        humanScore.setLayer(hCultureLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        scoreLayer.add(humanScore);

        ai1Score.setBorder(javax.swing.BorderFactory.createTitledBorder("AI1"));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, rCube, org.jdesktop.beansbinding.ELProperty.create("${icon}"), rCube1, org.jdesktop.beansbinding.BeanProperty.create("icon"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, oCube, org.jdesktop.beansbinding.ELProperty.create("${icon}"), oCube1, org.jdesktop.beansbinding.BeanProperty.create("icon"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, bCube, org.jdesktop.beansbinding.ELProperty.create("${icon}"), bCube1, org.jdesktop.beansbinding.BeanProperty.create("icon"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, gCube, org.jdesktop.beansbinding.ELProperty.create("${icon}"), gCube1, org.jdesktop.beansbinding.BeanProperty.create("icon"));
        bindingGroup.addBinding(binding);

        multiP1.setText("X");

        multiP5.setText("X");

        multiP6.setText("X");

        multiP7.setText("X");

        ai1RedCube.setText("0");

        ai1OrangeCube.setText("0");

        ai1BlueCube.setText("0");

        ai1GreenCube.setText("0");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, goCube, org.jdesktop.beansbinding.ELProperty.create("${icon}"), goCube2, org.jdesktop.beansbinding.BeanProperty.create("icon"));
        bindingGroup.addBinding(binding);

        multiP13.setText("X");

        ai1GoldenCube.setText("0");

        javax.swing.GroupLayout ai1ScoreLayout = new javax.swing.GroupLayout(ai1Score);
        ai1Score.setLayout(ai1ScoreLayout);
        ai1ScoreLayout.setHorizontalGroup(
            ai1ScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ai1ScoreLayout.createSequentialGroup()
                .addGroup(ai1ScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ai1ScoreLayout.createSequentialGroup()
                        .addComponent(oCube1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(multiP5)
                        .addGap(18, 18, 18)
                        .addComponent(ai1OrangeCube))
                    .addGroup(ai1ScoreLayout.createSequentialGroup()
                        .addComponent(bCube1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(multiP6)
                        .addGap(18, 18, 18)
                        .addComponent(ai1BlueCube))
                    .addGroup(ai1ScoreLayout.createSequentialGroup()
                        .addComponent(rCube1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(multiP1)
                        .addGap(18, 18, 18)
                        .addComponent(ai1RedCube))
                    .addGroup(ai1ScoreLayout.createSequentialGroup()
                        .addComponent(gCube1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(multiP7)
                        .addGap(18, 18, 18)
                        .addComponent(ai1GreenCube))
                    .addGroup(ai1ScoreLayout.createSequentialGroup()
                        .addComponent(goCube2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(multiP13)
                        .addGap(18, 18, 18)
                        .addComponent(ai1GoldenCube))
                    .addComponent(ai1CultureLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ai1ScoreLayout.setVerticalGroup(
            ai1ScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ai1ScoreLayout.createSequentialGroup()
                .addGroup(ai1ScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ai1ScoreLayout.createSequentialGroup()
                        .addGroup(ai1ScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(ai1ScoreLayout.createSequentialGroup()
                                .addGroup(ai1ScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(rCube1)
                                    .addGroup(ai1ScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(multiP1)
                                        .addComponent(ai1RedCube)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(oCube1))
                            .addGroup(ai1ScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(multiP5)
                                .addComponent(ai1OrangeCube)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bCube1))
                    .addGroup(ai1ScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(multiP6)
                        .addComponent(ai1BlueCube)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ai1ScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(gCube1)
                    .addGroup(ai1ScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(multiP7)
                        .addComponent(ai1GreenCube)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ai1ScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(goCube2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ai1ScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(multiP13)
                        .addComponent(ai1GoldenCube)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ai1CultureLabel))
        );
        ai1Score.setLayer(rCube1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ai1Score.setLayer(oCube1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ai1Score.setLayer(bCube1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ai1Score.setLayer(gCube1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ai1Score.setLayer(multiP1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ai1Score.setLayer(multiP5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ai1Score.setLayer(multiP6, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ai1Score.setLayer(multiP7, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ai1Score.setLayer(ai1RedCube, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ai1Score.setLayer(ai1OrangeCube, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ai1Score.setLayer(ai1BlueCube, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ai1Score.setLayer(ai1GreenCube, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ai1Score.setLayer(goCube2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ai1Score.setLayer(multiP13, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ai1Score.setLayer(ai1GoldenCube, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ai1Score.setLayer(ai1CultureLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        scoreLayer.add(ai1Score);

        jLayeredPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("AI2"));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, rCube, org.jdesktop.beansbinding.ELProperty.create("${icon}"), rCube2, org.jdesktop.beansbinding.BeanProperty.create("icon"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, oCube, org.jdesktop.beansbinding.ELProperty.create("${icon}"), oCube2, org.jdesktop.beansbinding.BeanProperty.create("icon"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, bCube, org.jdesktop.beansbinding.ELProperty.create("${icon}"), bCube2, org.jdesktop.beansbinding.BeanProperty.create("icon"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, gCube, org.jdesktop.beansbinding.ELProperty.create("${icon}"), gCube2, org.jdesktop.beansbinding.BeanProperty.create("icon"));
        bindingGroup.addBinding(binding);

        multiP8.setText("X");

        multiP9.setText("X");

        multiP10.setText("X");

        multiP11.setText("X");

        ai2RedCube.setText("0");

        ai2OrangeCube.setText("0");

        ai2BlueCube.setText("0");

        ai2GreenCube.setText("0");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, goCube, org.jdesktop.beansbinding.ELProperty.create("${icon}"), goCube3, org.jdesktop.beansbinding.BeanProperty.create("icon"));
        bindingGroup.addBinding(binding);

        multiP14.setText("X");

        ai2GoldenCube.setText("0");

        javax.swing.GroupLayout jLayeredPane3Layout = new javax.swing.GroupLayout(jLayeredPane3);
        jLayeredPane3.setLayout(jLayeredPane3Layout);
        jLayeredPane3Layout.setHorizontalGroup(
            jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane3Layout.createSequentialGroup()
                .addGroup(jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane3Layout.createSequentialGroup()
                        .addComponent(rCube2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(multiP8)
                        .addGap(18, 18, 18)
                        .addComponent(ai2RedCube))
                    .addGroup(jLayeredPane3Layout.createSequentialGroup()
                        .addComponent(oCube2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(multiP9)
                        .addGap(18, 18, 18)
                        .addComponent(ai2OrangeCube))
                    .addGroup(jLayeredPane3Layout.createSequentialGroup()
                        .addComponent(bCube2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(multiP10)
                        .addGap(18, 18, 18)
                        .addComponent(ai2BlueCube))
                    .addGroup(jLayeredPane3Layout.createSequentialGroup()
                        .addComponent(gCube2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(multiP11)
                        .addGap(18, 18, 18)
                        .addComponent(ai2GreenCube))
                    .addGroup(jLayeredPane3Layout.createSequentialGroup()
                        .addComponent(goCube3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(multiP14)
                        .addGap(18, 18, 18)
                        .addComponent(ai2GoldenCube))
                    .addComponent(ai2CultureLabel))
                .addGap(0, 12, Short.MAX_VALUE))
        );
        jLayeredPane3Layout.setVerticalGroup(
            jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane3Layout.createSequentialGroup()
                .addGroup(jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jLayeredPane3Layout.createSequentialGroup()
                        .addGroup(jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jLayeredPane3Layout.createSequentialGroup()
                                .addGroup(jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(rCube2)
                                    .addGroup(jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(multiP8)
                                        .addComponent(ai2RedCube)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(oCube2))
                            .addGroup(jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(multiP9)
                                .addComponent(ai2OrangeCube)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bCube2))
                    .addGroup(jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(multiP10)
                        .addComponent(ai2BlueCube)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(gCube2)
                    .addGroup(jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(multiP11)
                        .addComponent(ai2GreenCube)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(goCube3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(multiP14)
                        .addComponent(ai2GoldenCube)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ai2CultureLabel))
        );
        jLayeredPane3.setLayer(rCube2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(oCube2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(bCube2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(gCube2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(multiP8, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(multiP9, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(multiP10, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(multiP11, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(ai2RedCube, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(ai2OrangeCube, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(ai2BlueCube, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(ai2GreenCube, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(goCube3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(multiP14, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(ai2GoldenCube, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(ai2CultureLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        scoreLayer.add(jLayeredPane3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(scoreLayer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(mainActionBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scoreLayer, javax.swing.GroupLayout.PREFERRED_SIZE, 796, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(mainActionBar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        bindingGroup.bind();

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        CardLayout culture = (CardLayout)(mainLayer.getLayout());
        culture.next(mainLayer);
    }//GEN-LAST:event_nextButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        vectoryCardDialog.setVisible(true);
        vectCard.setName(Integer.toString(0));
    }//GEN-LAST:event_startButtonActionPerformed

    private void p1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p1MouseClicked
        if (p1.isEnabled() == true){
        if (roundCounter <= 5){
            selectTile("human",0,"production",null);
            roundCounter ++;
        } else {
            JOptionPane.showMessageDialog(
                    null, "Maximum opportunities reached", "Information",
                    JOptionPane.WARNING_MESSAGE);
        }
            if ((roundCounter != 2)&&(roundCounter <= 5)&&(roundCounter != 4)){
                if(roundCounter>=randomRoundCounter)
                    AISequence();
        } 
        }
    }//GEN-LAST:event_p1MouseClicked

    private void p2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p2MouseClicked
        if (p2.isEnabled() == true){
        if (roundCounter <= 5){
            selectTile("human",1,"production",null);
            roundCounter ++;
        } else {
            JOptionPane.showMessageDialog(
                    null, "Maximum opportunities reached", "Information",
                    JOptionPane.WARNING_MESSAGE);
        }
            if ((roundCounter != 2)&&(roundCounter <= 5)&&(roundCounter != 4)){
                if(roundCounter>=randomRoundCounter)
                    AISequence();
        }
        }
    }//GEN-LAST:event_p2MouseClicked

    private void p3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p3MouseClicked
        if (p3.isEnabled() == true){
        if (roundCounter <= 5){
            selectTile("human",2,"production",null);
            roundCounter ++;
        } else {
            JOptionPane.showMessageDialog(
                    null, "Maximum opportunities reached", "Information",
                    JOptionPane.WARNING_MESSAGE);
        }
            if ((roundCounter != 2)&&(roundCounter <= 5)&&(roundCounter != 4)){
                if(roundCounter>=randomRoundCounter)
                    AISequence();
        }
        } 
    }//GEN-LAST:event_p3MouseClicked

    private void p4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p4MouseClicked
        if (p4.isEnabled() == true){
        if (roundCounter <= 5){
            selectTile("human",3,"production",null);
            roundCounter ++;
        } else {
            JOptionPane.showMessageDialog(
                    null, "Maximum opportunities reached", "Information",
                    JOptionPane.WARNING_MESSAGE);
        }
            if ((roundCounter != 2)&&(roundCounter <= 5)&&(roundCounter != 4)){
                if(roundCounter>=randomRoundCounter)
                    AISequence();
        }
        } 
    }//GEN-LAST:event_p4MouseClicked

    private void p5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p5MouseClicked
        if (p5.isEnabled() == true){
        if (roundCounter <= 5){
            selectTile("human",4,"production",null);
            roundCounter ++;
        } else {
            JOptionPane.showMessageDialog(
                    null, "Maximum opportunities reached", "Information",
                    JOptionPane.WARNING_MESSAGE);
        }
            if ((roundCounter != 2)&&(roundCounter <= 5)&&(roundCounter != 4)){
                if(roundCounter>=randomRoundCounter)
                    AISequence();
        }
        }
    }//GEN-LAST:event_p5MouseClicked

    private void p6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p6MouseClicked
        if (p6.isEnabled() == true){
        if (roundCounter <= 5){
            selectTile("human",5,"production",null);
            roundCounter ++;
        } else {
            JOptionPane.showMessageDialog(
                    null, "Maximum opportunities reached", "Information",
                    JOptionPane.WARNING_MESSAGE);
        }
            if ((roundCounter != 2)&&(roundCounter <= 5)&&(roundCounter != 4)){
                if(roundCounter>=randomRoundCounter)
                    AISequence();
        }
        }
    }//GEN-LAST:event_p6MouseClicked

    private void p7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p7MouseClicked
        if (p7.isEnabled() == true){
        if (roundCounter <= 5){
            selectTile("human",6,"production",null);
            roundCounter ++;
        } else {
            JOptionPane.showMessageDialog(
                    null, "Maximum opportunities reached", "Information",
                    JOptionPane.WARNING_MESSAGE);
        }
            if ((roundCounter != 2)&&(roundCounter <= 5)&&(roundCounter != 4)){
                if(roundCounter>=randomRoundCounter)
                    AISequence();
        }
        }
    }//GEN-LAST:event_p7MouseClicked

    private void p8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p8MouseClicked
        if (p8.isEnabled() == true){
        if (roundCounter <= 5){
            selectTile("human",7,"production",null);
            roundCounter ++;
        } else {
            JOptionPane.showMessageDialog(
                    null, "Maximum opportunities reached", "Information",
                    JOptionPane.WARNING_MESSAGE);
        }
            if ((roundCounter != 2)&&(roundCounter <= 5)&&(roundCounter != 4)){
                if(roundCounter>=randomRoundCounter)
                    AISequence();
        }
        }
    }//GEN-LAST:event_p8MouseClicked

    private void p11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p11MouseClicked
        if (p11.isEnabled() == true){
        if (roundCounter <= 5){
            selectTile("human",8,"production",null);
            roundCounter ++;
        } else {
            JOptionPane.showMessageDialog(
                    null, "Maximum opportunities reached", "Information",
                    JOptionPane.WARNING_MESSAGE);
        }
            if ((roundCounter != 2)&&(roundCounter <= 5)&&(roundCounter != 4)){
                if(roundCounter>=randomRoundCounter)
                    AISequence();
        }
        }
    }//GEN-LAST:event_p11MouseClicked

    private void p12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p12MouseClicked
        if (p12.isEnabled() == true){
        if (roundCounter <= 5){
            selectTile("human",9,"production",null);
            roundCounter ++;
        } else {
            JOptionPane.showMessageDialog(
                    null, "Maximum opportunities reached", "Information",
                    JOptionPane.WARNING_MESSAGE);
        }
            if ((roundCounter != 2)&&(roundCounter <= 5)&&(roundCounter != 4)){
                if(roundCounter>=randomRoundCounter)
                    AISequence();
        }
        }
    }//GEN-LAST:event_p12MouseClicked

    private void p13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p13MouseClicked
        if (p13.isEnabled() == true){
        if (roundCounter <= 5){
            selectTile("human",10,"production",null);
            roundCounter ++;
        } else {
            JOptionPane.showMessageDialog(
                    null, "Maximum opportunities reached", "Information",
                    JOptionPane.WARNING_MESSAGE);
        }
            if ((roundCounter != 2)&&(roundCounter <= 5)&&(roundCounter != 4)){
                if(roundCounter>=randomRoundCounter)
                    AISequence();
        }
        }
    }//GEN-LAST:event_p13MouseClicked

    private void p14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p14MouseClicked
        if (p14.isEnabled() == true){
        if (roundCounter <= 5){
            selectTile("human",11,"production",null);
            roundCounter ++;
        } else {
            JOptionPane.showMessageDialog(
                    null, "Maximum opportunities reached", "Information",
                    JOptionPane.WARNING_MESSAGE);
        }
            if ((roundCounter != 2)&&(roundCounter <= 5)&&(roundCounter != 4)){
                if(roundCounter>=randomRoundCounter)
                    AISequence();
        }
        }
    }//GEN-LAST:event_p14MouseClicked

    private void p15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p15MouseClicked
        if (p15.isEnabled() == true){
        if (roundCounter <= 5){
            selectTile("human",12,"production",null);
            roundCounter ++;
        } else {
            JOptionPane.showMessageDialog(
                    null, "Maximum opportunities reached", "Information",
                    JOptionPane.WARNING_MESSAGE);
        }
            if ((roundCounter != 2)&&(roundCounter <= 5)&&(roundCounter != 4)){
                if(roundCounter>=randomRoundCounter)
                    AISequence();
        }
        }
    }//GEN-LAST:event_p15MouseClicked

    private void p16MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p16MouseClicked
        if (p16.isEnabled() == true){
        if (roundCounter <= 5){
            selectTile("human",13,"production",null);
            roundCounter ++;
        } else {
            JOptionPane.showMessageDialog(
                    null, "Maximum opportunities reached", "Information",
                    JOptionPane.WARNING_MESSAGE);
        }
            if ((roundCounter != 2)&&(roundCounter <= 5)&&(roundCounter != 4)){
                if(roundCounter>=randomRoundCounter)
                    AISequence();
        }
        }
    }//GEN-LAST:event_p16MouseClicked

    private void p17MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p17MouseClicked
        if (p17.isEnabled() == true){
        if (roundCounter <= 5){
            selectTile("human",14,"production",null);
            roundCounter ++;
        } else {
            JOptionPane.showMessageDialog(
                    null, "Maximum opportunities reached", "Information",
                    JOptionPane.WARNING_MESSAGE);
        }
            if ((roundCounter != 2)&&(roundCounter <= 5)&&(roundCounter != 4)){
                if(roundCounter>=randomRoundCounter)
                    AISequence();
        }
        }
    }//GEN-LAST:event_p17MouseClicked

    private void p18MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p18MouseClicked
        if (p18.isEnabled() == true){
        if (roundCounter <= 5){
            selectTile("human",15,"production",null);
            roundCounter ++;
        } else {
            JOptionPane.showMessageDialog(
                    null, "Maximum opportunities reached", "Information",
                    JOptionPane.WARNING_MESSAGE);
        }
            if ((roundCounter != 2)&&(roundCounter <= 5)&&(roundCounter != 4)){
                if(roundCounter>=randomRoundCounter)
                    AISequence();
        }
        }
    }//GEN-LAST:event_p18MouseClicked

    private void p9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p9MouseClicked
        if (p9.isEnabled() == true){
        if (roundCounter <= 5){
            selectTile("human",16,"production",null);
            roundCounter ++;
        } else {
            JOptionPane.showMessageDialog(
                    null, "Maximum opportunities reached", "Information",
                    JOptionPane.WARNING_MESSAGE);
        }
            if ((roundCounter != 2)&&(roundCounter <= 5)&&(roundCounter != 4)){
                if(roundCounter>=randomRoundCounter)
                    AISequence();
        }
        }
    }//GEN-LAST:event_p9MouseClicked

    private void p10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p10MouseClicked
        if (p10.isEnabled() == true){
        if (roundCounter <= 5){
            selectTile("human",17,"production",null);
            roundCounter ++;
        } else {
            JOptionPane.showMessageDialog(
                    null, "Maximum opportunities reached", "Information",
                    JOptionPane.WARNING_MESSAGE);
        }
            if ((roundCounter != 2)&&(roundCounter <= 5)&&(roundCounter != 4)){
                if(roundCounter>=randomRoundCounter)
                    AISequence();
        }
        }
    }//GEN-LAST:event_p10MouseClicked

    private void cultureNorseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cultureNorseActionPerformed
        CardLayout culture = (CardLayout)(mainLayer.getLayout());
        playBoard.selectCulture("norse");
        culture.first(mainLayer);
        cultureDialog.dispose();
        initCultureLabel();
    }//GEN-LAST:event_cultureNorseActionPerformed

    private void cultureGreekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cultureGreekActionPerformed
        CardLayout culture = (CardLayout)(mainLayer.getLayout());
        playBoard.selectCulture("greek");
        culture.next(mainLayer);
        cultureDialog.dispose();
        initCultureLabel();
    }//GEN-LAST:event_cultureGreekActionPerformed

    private void cultureEgyptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cultureEgyptActionPerformed
        CardLayout culture = (CardLayout)(mainLayer.getLayout());
        playBoard.selectCulture("egypt");
        culture.last(mainLayer);
        cultureDialog.dispose();
        initCultureLabel();
    }//GEN-LAST:event_cultureEgyptActionPerformed

    private void productionFrameWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_productionFrameWindowClosed
        if (!productionDisplay.getName().equalsIgnoreCase("1")){
        JOptionPane.showMessageDialog(
                    null, "Game is Ready to Play!", "Information",
                    JOptionPane.WARNING_MESSAGE);
        }
        refreshCube();
        clearTile();
        productionFrame.dispose();
    }//GEN-LAST:event_productionFrameWindowClosed

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        CardLayout culture = (CardLayout)(mainLayer.getLayout());
        culture.previous(mainLayer);
    }//GEN-LAST:event_previousButtonActionPerformed

    private void cultureDialogWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_cultureDialogWindowClosed
        placeTile(18);
        productionFrame.setVisible(true);
    }//GEN-LAST:event_cultureDialogWindowClosed

    private void vectoryCardDialogWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_vectoryCardDialogWindowClosed

            
    }//GEN-LAST:event_vectoryCardDialogWindowClosed

    private void permaCard1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_permaCard1MouseClicked
        if (permaCard1.isEnabled()&&(permaCard1.getName().equalsIgnoreCase("1"))){
            permaCard1.setEnabled(false);
            permaCard1.setName(Integer.toString(0));
        } else {
            permaCard1.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_permaCard1MouseClicked

    private void permaCard2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_permaCard2MouseClicked
        if (permaCard2.isEnabled()&&(permaCard2.getName().equalsIgnoreCase("1"))){
            permaCard2.setEnabled(false);
            permaCard2.setName(Integer.toString(0));
        } else {
            permaCard2.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_permaCard2MouseClicked

    private void permaCard3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_permaCard3MouseClicked
        if (permaCard3.isEnabled()&&(permaCard3.getName().equalsIgnoreCase("1"))){
            permaCard3.setEnabled(false);
            permaCard3.setName(Integer.toString(0));
        } else {
            permaCard3.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_permaCard3MouseClicked

    private void permaCard4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_permaCard4MouseClicked
        if (permaCard4.isEnabled()&&(permaCard4.getName().equalsIgnoreCase("1"))){
            permaCard4.setEnabled(false);
            permaCard4.setName(Integer.toString(0));
        } else {
            permaCard4.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_permaCard4MouseClicked

    private void permaCard5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_permaCard5MouseClicked
        if (permaCard5.isEnabled()&&(permaCard5.getName().equalsIgnoreCase("1"))){
            permaCard5.setEnabled(false);
            permaCard5.setName(Integer.toString(0));
        } else {
            permaCard5.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_permaCard5MouseClicked

    private void permaCard6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_permaCard6MouseClicked
        if (permaCard6.isEnabled()&&(permaCard6.getName().equalsIgnoreCase("1"))){
            permaCard6.setEnabled(false);
            permaCard6.setName(Integer.toString(0));
        } else {
            permaCard6.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_permaCard6MouseClicked

    private void permaCard7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_permaCard7MouseClicked
        if (permaCard7.isEnabled()&&(permaCard7.getName().equalsIgnoreCase("1"))){
            permaCard7.setEnabled(false);
            permaCard7.setName(Integer.toString(0));
        } else {
            permaCard7.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_permaCard7MouseClicked

    private void permaCard1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_permaCard1MouseEntered
        permaCard1.setEnabled(true);
    }//GEN-LAST:event_permaCard1MouseEntered

    private void permaCard1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_permaCard1MouseExited
        if (!permaCard1.getName().equalsIgnoreCase("1")){
            permaCard1.setEnabled(false);
        }
    }//GEN-LAST:event_permaCard1MouseExited

    private void permaCard2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_permaCard2MouseEntered
        permaCard2.setEnabled(true);
    }//GEN-LAST:event_permaCard2MouseEntered

    private void permaCard2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_permaCard2MouseExited
        if (!permaCard2.getName().equalsIgnoreCase("1")){
            permaCard2.setEnabled(false);
        }
    }//GEN-LAST:event_permaCard2MouseExited

    private void permaCard3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_permaCard3MouseEntered
        permaCard3.setEnabled(true);
    }//GEN-LAST:event_permaCard3MouseEntered

    private void permaCard3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_permaCard3MouseExited
        if (!permaCard3.getName().equalsIgnoreCase("1")){
            permaCard3.setEnabled(false);
        }
    }//GEN-LAST:event_permaCard3MouseExited

    private void permaCard4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_permaCard4MouseEntered
        permaCard4.setEnabled(true);
    }//GEN-LAST:event_permaCard4MouseEntered

    private void permaCard4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_permaCard4MouseExited
        if (!permaCard4.getName().equalsIgnoreCase("1")){
            permaCard4.setEnabled(false);
        }
    }//GEN-LAST:event_permaCard4MouseExited

    private void permaCard5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_permaCard5MouseEntered
        permaCard5.setEnabled(true);
    }//GEN-LAST:event_permaCard5MouseEntered

    private void permaCard5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_permaCard5MouseExited
        if (!permaCard5.getName().equalsIgnoreCase("1")){
            permaCard5.setEnabled(false);
        }
    }//GEN-LAST:event_permaCard5MouseExited

    private void permaCard6MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_permaCard6MouseEntered
        permaCard6.setEnabled(true);
    }//GEN-LAST:event_permaCard6MouseEntered

    private void permaCard6MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_permaCard6MouseExited
        if (!permaCard6.getName().equalsIgnoreCase("1")){
            permaCard6.setEnabled(false);
        }
    }//GEN-LAST:event_permaCard6MouseExited

    private void permaCard7MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_permaCard7MouseEntered
        permaCard7.setEnabled(true);
    }//GEN-LAST:event_permaCard7MouseEntered

    private void permaCard7MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_permaCard7MouseExited
        if (!permaCard7.getName().equalsIgnoreCase("1")){
            permaCard7.setEnabled(false);
        }
    }//GEN-LAST:event_permaCard7MouseExited

    private void permaCardDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_permaCardDialogWindowClosing
        ArrayList<MBcard.card> pCard = new ArrayList<>();
        pCard = playBoard.getPermaCardGp(playBoard.humanCulture());
        if (permaCard1.isEnabled()) playBoard.changeHandCard("human", "add", pCard.get(0));
        if (permaCard2.isEnabled()) playBoard.changeHandCard("human", "add", pCard.get(1));
        if (permaCard3.isEnabled()) playBoard.changeHandCard("human", "add", pCard.get(2));
        if (permaCard4.isEnabled()) playBoard.changeHandCard("human", "add", pCard.get(3));
        if (permaCard5.isEnabled()) playBoard.changeHandCard("human", "add", pCard.get(4));
        if (permaCard6.isEnabled()) playBoard.changeHandCard("human", "add", pCard.get(5));
        if (permaCard7.isEnabled()) playBoard.changeHandCard("human", "add", pCard.get(6));
    }//GEN-LAST:event_permaCardDialogWindowClosing

    private void handCard1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard1MouseClicked
        if (handCard1.isEnabled()&&(handCard1.getName().equalsIgnoreCase("1"))){
            handCard1.setEnabled(false);
            handCard1.setName(Integer.toString(0));
        } else {
            handCard1.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_handCard1MouseClicked

    private void handCard1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard1MouseEntered
        handCard1.setEnabled(true);
    }//GEN-LAST:event_handCard1MouseEntered

    private void handCard1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard1MouseExited
        if (!handCard1.getName().equalsIgnoreCase("1")){
            handCard1.setEnabled(false);
        }
    }//GEN-LAST:event_handCard1MouseExited

    private void handCardDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_handCardDialogWindowClosing
        idSelectedCard("human");
    }//GEN-LAST:event_handCardDialogWindowClosing

    private void handButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handButtonActionPerformed
        if (playerTurn == 0){
            JOptionPane.showMessageDialog(
                    null, "End of this turn!", "Information",
                    JOptionPane.WARNING_MESSAGE);
            playerTurn = 3;           
            endTurn("human");
            handCardDialog.setVisible(false);
            playBoard.addToAiHandCard();
        } else {
            updateHandCard();
            handCardDialog.setVisible(true);
        }
    }//GEN-LAST:event_handButtonActionPerformed

    private void permaCardDialogWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_permaCardDialogWindowClosed
       
    }//GEN-LAST:event_permaCardDialogWindowClosed

    private void handCard2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard2MouseClicked
        if (handCard2.isEnabled()&&(handCard2.getName().equalsIgnoreCase("1"))){
            handCard2.setEnabled(false);
            handCard2.setName(Integer.toString(0));
        } else {
            handCard2.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_handCard2MouseClicked

    private void handCard2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard2MouseEntered
        handCard2.setEnabled(true);
    }//GEN-LAST:event_handCard2MouseEntered

    private void handCard2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard2MouseExited
        if (!handCard2.getName().equalsIgnoreCase("1")){
            handCard2.setEnabled(false);
        }
    }//GEN-LAST:event_handCard2MouseExited

    private void handCard3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard3MouseClicked
        if (handCard3.isEnabled()&&(handCard3.getName().equalsIgnoreCase("1"))){
            handCard3.setEnabled(false);
            handCard3.setName(Integer.toString(0));
        } else {
            handCard3.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_handCard3MouseClicked

    private void handCard3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard3MouseEntered
        handCard3.setEnabled(true);
    }//GEN-LAST:event_handCard3MouseEntered

    private void handCard3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard3MouseExited
        if (!handCard3.getName().equalsIgnoreCase("1")){
            handCard3.setEnabled(false);
        }
    }//GEN-LAST:event_handCard3MouseExited

    private void handCard4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard4MouseClicked
        if (handCard4.isEnabled()&&(handCard4.getName().equalsIgnoreCase("1"))){
            handCard4.setEnabled(false);
            handCard4.setName(Integer.toString(0));
        } else {
            handCard4.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_handCard4MouseClicked

    private void handCard4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard4MouseEntered
        handCard4.setEnabled(true);
    }//GEN-LAST:event_handCard4MouseEntered

    private void handCard4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard4MouseExited
        if (!handCard4.getName().equalsIgnoreCase("1")){
            handCard4.setEnabled(false);
        }
    }//GEN-LAST:event_handCard4MouseExited

    private void handCard5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard5MouseClicked
        if (handCard5.isEnabled()&&(handCard5.getName().equalsIgnoreCase("1"))){
            handCard5.setEnabled(false);
            handCard5.setName(Integer.toString(0));
        } else {
            handCard5.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_handCard5MouseClicked

    private void handCard5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard5MouseEntered
        handCard5.setEnabled(true);
    }//GEN-LAST:event_handCard5MouseEntered

    private void handCard5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard5MouseExited
        if (!handCard5.getName().equalsIgnoreCase("1")){
            handCard5.setEnabled(false);
        }
    }//GEN-LAST:event_handCard5MouseExited

    private void handCard6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard6MouseClicked
        if (handCard6.isEnabled()&&(handCard6.getName().equalsIgnoreCase("1"))){
            handCard6.setEnabled(false);
            handCard6.setName(Integer.toString(0));
        } else {
            handCard6.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_handCard6MouseClicked

    private void handCard6MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard6MouseEntered
        handCard6.setEnabled(true);
    }//GEN-LAST:event_handCard6MouseEntered

    private void handCard6MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard6MouseExited
        if (!handCard6.getName().equalsIgnoreCase("1")){
            handCard6.setEnabled(false);
        }
    }//GEN-LAST:event_handCard6MouseExited

    private void handCard7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard7MouseClicked
        if (handCard7.isEnabled()&&(handCard7.getName().equalsIgnoreCase("1"))){
            handCard7.setEnabled(false);
            handCard7.setName(Integer.toString(0));
        } else {
            handCard7.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_handCard7MouseClicked

    private void handCard7MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard7MouseEntered
        handCard7.setEnabled(true);
    }//GEN-LAST:event_handCard7MouseEntered

    private void handCard7MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard7MouseExited
        if (!handCard7.getName().equalsIgnoreCase("1")){
            handCard7.setEnabled(false);
        }
    }//GEN-LAST:event_handCard7MouseExited

    private void handCard8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard8MouseClicked
        if (handCard8.isEnabled()&&(handCard8.getName().equalsIgnoreCase("1"))){
            handCard8.setEnabled(false);
            handCard8.setName(Integer.toString(0));
        } else {
            handCard8.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_handCard8MouseClicked

    private void handCard8MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard8MouseEntered
        handCard8.setEnabled(true);
    }//GEN-LAST:event_handCard8MouseEntered

    private void handCard8MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard8MouseExited
        if (!handCard8.getName().equalsIgnoreCase("1")){
            handCard8.setEnabled(false);
        }
    }//GEN-LAST:event_handCard8MouseExited

    private void handCard9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard9MouseClicked
        if (handCard9.isEnabled()&&(handCard9.getName().equalsIgnoreCase("1"))){
            handCard9.setEnabled(false);
            handCard9.setName(Integer.toString(0));
        } else {
            handCard9.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_handCard9MouseClicked

    private void handCard9MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard9MouseEntered
        handCard9.setEnabled(true);
    }//GEN-LAST:event_handCard9MouseEntered

    private void handCard9MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard9MouseExited
        if (!handCard9.getName().equalsIgnoreCase("1")){
            handCard9.setEnabled(false);
        }
    }//GEN-LAST:event_handCard9MouseExited

    private void handCard10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard10MouseClicked
        if (handCard10.isEnabled()&&(handCard10.getName().equalsIgnoreCase("1"))){
            handCard10.setEnabled(false);
            handCard10.setName(Integer.toString(0));
        } else {
            handCard10.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_handCard10MouseClicked

    private void handCard10MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard10MouseEntered
        handCard10.setEnabled(true);
    }//GEN-LAST:event_handCard10MouseEntered

    private void handCard10MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handCard10MouseExited
        if (!handCard10.getName().equalsIgnoreCase("1")){
            handCard10.setEnabled(false);
        }
    }//GEN-LAST:event_handCard10MouseExited

    private void favorCubeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_favorCubeActionPerformed
        playBoard.gather("human", "blue");
        playBoard.gather("ai1", "blue");
        playBoard.gather("ai2", "blue");
        refreshCube();
        typeSelectDialog.dispose();
    }//GEN-LAST:event_favorCubeActionPerformed

    private void foodCubeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foodCubeActionPerformed
        playBoard.gather("human", "green");
        playBoard.gather("ai1", "green");
        playBoard.gather("ai2", "green");
        refreshCube();
        typeSelectDialog.dispose();
    }//GEN-LAST:event_foodCubeActionPerformed

    private void woodCubeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_woodCubeActionPerformed
        playBoard.gather("human", "orange");
        playBoard.gather("ai1", "orange");
        playBoard.gather("ai2", "orange");
        refreshCube();
        typeSelectDialog.dispose();
    }//GEN-LAST:event_woodCubeActionPerformed

    private void typeSelectDialogWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_typeSelectDialogWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeSelectDialogWindowClosed

    private void goldCubeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goldCubeActionPerformed
        playBoard.gather("human", "golden");
        playBoard.gather("ai1", "golden");
        playBoard.gather("ai2", "golden");
        refreshCube();
        typeSelectDialog.dispose();       
    }//GEN-LAST:event_goldCubeActionPerformed

    private void tradeDialogWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_tradeDialogWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_tradeDialogWindowClosed

    private void conformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conformActionPerformed
        tradeCube("human");
        refreshCube();
    }//GEN-LAST:event_conformActionPerformed

    private void buildButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildButtonActionPerformed
        buildTile("human",buildingsBox.getSelectedItem().toString().toLowerCase());
        refreshCube();
        if(currentBuildCount==randomBuildCount)
            buildButton.setEnabled(false);
    }//GEN-LAST:event_buildButtonActionPerformed

    private void buildDialogWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_buildDialogWindowClosed
        currentBuildCount=0;
        randomBuildCount=1;
        buildButton.setEnabled(true);
        buildDialog.dispose();
    }//GEN-LAST:event_buildDialogWindowClosed

    private void battleUnit1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit1MouseClicked
        if (battleUnit1.isEnabled()&&(battleUnit1.getName().equalsIgnoreCase("1"))){
            battleUnit1.setEnabled(false);
            battleUnit1.setName(Integer.toString(0));
        } else {
            battleUnit1.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_battleUnit1MouseClicked

    private void battleUnit1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit1MouseEntered
        battleUnit1.setEnabled(true);
    }//GEN-LAST:event_battleUnit1MouseEntered

    private void battleUnit1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit1MouseExited
        if (!battleUnit1.getName().equalsIgnoreCase("1")){
            battleUnit1.setEnabled(false);
        }
    }//GEN-LAST:event_battleUnit1MouseExited

    private void battleCardDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_battleCardDialogWindowClosing
        currentRecruitCount=0;
        randomRecruitCount=2;
        recruit.setEnabled(true);
        battleCardDialog.dispose();
    }//GEN-LAST:event_battleCardDialogWindowClosing

    private void battleUnit2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit2MouseClicked
        if (battleUnit2.isEnabled()&&(battleUnit2.getName().equalsIgnoreCase("1"))){
            battleUnit2.setEnabled(false);
            battleUnit2.setName(Integer.toString(0));
        } else {
            battleUnit2.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_battleUnit2MouseClicked

    private void battleUnit2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit2MouseEntered
        battleUnit2.setEnabled(true);
    }//GEN-LAST:event_battleUnit2MouseEntered

    private void battleUnit2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit2MouseExited
        if (!battleUnit2.getName().equalsIgnoreCase("1")){
            battleUnit2.setEnabled(false);
        }
    }//GEN-LAST:event_battleUnit2MouseExited

    private void battleUnit3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit3MouseClicked
        if (battleUnit3.isEnabled()&&(battleUnit3.getName().equalsIgnoreCase("1"))){
            battleUnit3.setEnabled(false);
            battleUnit3.setName(Integer.toString(0));
        } else {
            battleUnit3.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_battleUnit3MouseClicked

    private void battleUnit3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit3MouseEntered
        battleUnit3.setEnabled(true);
    }//GEN-LAST:event_battleUnit3MouseEntered

    private void battleUnit3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit3MouseExited
        if (!battleUnit3.getName().equalsIgnoreCase("1")){
            battleUnit3.setEnabled(false);
        }
    }//GEN-LAST:event_battleUnit3MouseExited

    private void battleUnit4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit4MouseClicked
        if (battleUnit4.isEnabled()&&(battleUnit4.getName().equalsIgnoreCase("1"))){
            battleUnit4.setEnabled(false);
            battleUnit4.setName(Integer.toString(0));
        } else {
            battleUnit4.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_battleUnit4MouseClicked

    private void battleUnit4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit4MouseEntered
        battleUnit4.setEnabled(true);
    }//GEN-LAST:event_battleUnit4MouseEntered

    private void battleUnit4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit4MouseExited
        if (!battleUnit4.getName().equalsIgnoreCase("1")){
            battleUnit4.setEnabled(false);
        }
    }//GEN-LAST:event_battleUnit4MouseExited

    private void battleUnit5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit5MouseClicked
        if (battleUnit5.isEnabled()&&(battleUnit5.getName().equalsIgnoreCase("1"))){
            battleUnit5.setEnabled(false);
            battleUnit5.setName(Integer.toString(0));
        } else {
            battleUnit5.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_battleUnit5MouseClicked

    private void battleUnit5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit5MouseEntered
        battleUnit5.setEnabled(true);
    }//GEN-LAST:event_battleUnit5MouseEntered

    private void battleUnit5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit5MouseExited
        if (!battleUnit5.getName().equalsIgnoreCase("1")){
            battleUnit5.setEnabled(false);
        }
    }//GEN-LAST:event_battleUnit5MouseExited

    private void battleUnit6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit6MouseClicked
        if (battleUnit6.isEnabled()&&(battleUnit6.getName().equalsIgnoreCase("1"))){
            battleUnit6.setEnabled(false);
            battleUnit6.setName(Integer.toString(0));
        } else {
            battleUnit6.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_battleUnit6MouseClicked

    private void battleUnit6MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit6MouseEntered
        battleUnit6.setEnabled(true);
    }//GEN-LAST:event_battleUnit6MouseEntered

    private void battleUnit6MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit6MouseExited
        if (!battleUnit6.getName().equalsIgnoreCase("1")){
            battleUnit6.setEnabled(false);
        }
    }//GEN-LAST:event_battleUnit6MouseExited

    private void battleUnit7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit7MouseClicked
       if (battleUnit7.isEnabled()&&(battleUnit7.getName().equalsIgnoreCase("1"))){
            battleUnit7.setEnabled(false);
            battleUnit7.setName(Integer.toString(0));
        } else {
            battleUnit7.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_battleUnit7MouseClicked

    private void battleUnit7MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit7MouseEntered
        battleUnit7.setEnabled(true);
    }//GEN-LAST:event_battleUnit7MouseEntered

    private void battleUnit7MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit7MouseExited
        if (!battleUnit7.getName().equalsIgnoreCase("1")){
            battleUnit7.setEnabled(false);
        }
    }//GEN-LAST:event_battleUnit7MouseExited

    private void battleUnit8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit8MouseClicked
        if (battleUnit8.isEnabled()&&(battleUnit8.getName().equalsIgnoreCase("1"))){
            battleUnit8.setEnabled(false);
            battleUnit8.setName(Integer.toString(0));
        } else {
            battleUnit8.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_battleUnit8MouseClicked

    private void battleUnit8MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit8MouseEntered
        battleUnit8.setEnabled(true);
    }//GEN-LAST:event_battleUnit8MouseEntered

    private void battleUnit8MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit8MouseExited
        if (!battleUnit8.getName().equalsIgnoreCase("1")){
            battleUnit8.setEnabled(false);
        }
    }//GEN-LAST:event_battleUnit8MouseExited

    private void battleUnit9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit9MouseClicked
        if (battleUnit9.isEnabled()&&(battleUnit9.getName().equalsIgnoreCase("1"))){
            battleUnit9.setEnabled(false);
            battleUnit9.setName(Integer.toString(0));
        } else {
            battleUnit9.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_battleUnit9MouseClicked

    private void battleUnit9MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit9MouseEntered
        battleUnit9.setEnabled(true);
    }//GEN-LAST:event_battleUnit9MouseEntered

    private void battleUnit9MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit9MouseExited
        if (!battleUnit9.getName().equalsIgnoreCase("1")){
            battleUnit9.setEnabled(false);
        }
    }//GEN-LAST:event_battleUnit9MouseExited

    private void battleUnit10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit10MouseClicked
        if (battleUnit10.isEnabled()&&(battleUnit10.getName().equalsIgnoreCase("1"))){
            battleUnit10.setEnabled(false);
            battleUnit10.setName(Integer.toString(0));
        } else {
            battleUnit10.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_battleUnit10MouseClicked

    private void battleUnit10MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit10MouseEntered
        battleUnit10.setEnabled(true);
    }//GEN-LAST:event_battleUnit10MouseEntered

    private void battleUnit10MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit10MouseExited
        if (!battleUnit10.getName().equalsIgnoreCase("1")){
            battleUnit10.setEnabled(false);
        }
    }//GEN-LAST:event_battleUnit10MouseExited

    private void battleUnit11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit11MouseClicked
        if (battleUnit11.isEnabled()&&(battleUnit11.getName().equalsIgnoreCase("1"))){
            battleUnit11.setEnabled(false);
            battleUnit11.setName(Integer.toString(0));
        } else {
            battleUnit11.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_battleUnit11MouseClicked

    private void battleUnit11MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit11MouseEntered
        battleUnit11.setEnabled(true);
    }//GEN-LAST:event_battleUnit11MouseEntered

    private void battleUnit11MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit11MouseExited
        if (!battleUnit11.getName().equalsIgnoreCase("1")){
            battleUnit11.setEnabled(false);
        }
    }//GEN-LAST:event_battleUnit11MouseExited

    private void battleUnit12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit12MouseClicked
        if (battleUnit12.isEnabled()&&(battleUnit12.getName().equalsIgnoreCase("1"))){
            battleUnit12.setEnabled(false);
            battleUnit12.setName(Integer.toString(0));
        } else {
            battleUnit12.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_battleUnit12MouseClicked

    private void battleUnit12MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit12MouseEntered
        battleUnit12.setEnabled(true);
    }//GEN-LAST:event_battleUnit12MouseEntered

    private void battleUnit12MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_battleUnit12MouseExited
        if (!battleUnit12.getName().equalsIgnoreCase("1")){
            battleUnit12.setEnabled(false);
        }
    }//GEN-LAST:event_battleUnit12MouseExited

    private void unitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unitButtonActionPerformed
        updateBattleUnit();
        battleUnitDialog.setVisible(true);
    }//GEN-LAST:event_unitButtonActionPerformed

    private void battleUnitDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_battleUnitDialogWindowClosing
        attackBattleArmy("human",whichAI);      
    }//GEN-LAST:event_battleUnitDialogWindowClosing

    private void largArmyCardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_largArmyCardMouseClicked
        if (!vectCard.getName().equalsIgnoreCase("1")){
            updateCubeOnCard("human","tla",1);
            vectCard.setName(Integer.toString(1));
            updatePermaCard();
            permaCardDialog.setVisible(true);
        }        
    }//GEN-LAST:event_largArmyCardMouseClicked

    private void mostBuildCardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mostBuildCardMouseClicked
        if (!vectCard.getName().equalsIgnoreCase("1")){
            updateCubeOnCard("human","mb",1);
            vectCard.setName(Integer.toString(1));
            updatePermaCard();
            permaCardDialog.setVisible(true);
        }       
    }//GEN-LAST:event_mostBuildCardMouseClicked

    private void wonderCardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wonderCardMouseClicked
        if (!vectCard.getName().equalsIgnoreCase("1")){
            updateCubeOnCard("human","tw",1);
            vectCard.setName(Integer.toString(1));
            updatePermaCard();
            permaCardDialog.setVisible(true);
        }       
    }//GEN-LAST:event_wonderCardMouseClicked

    private void lastBattCardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lastBattCardMouseClicked
        if (!vectCard.getName().equalsIgnoreCase("1")){
            updateCubeOnCard("human","tlb",1);
            vectCard.setName(Integer.toString(1));
            updatePermaCard();
            permaCardDialog.setVisible(true);
        }     
    }//GEN-LAST:event_lastBattCardMouseClicked

    private void hCultureLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hCultureLabelMouseClicked
        vectoryCardDialog.setVisible(true);
    }//GEN-LAST:event_hCultureLabelMouseClicked

    private void conform1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conform1ActionPerformed
        // TODO add your handling code here:
        randomtradeGENR1("human");
        refreshCube();
    }//GEN-LAST:event_conform1ActionPerformed

    private void tradeDialog1WindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_tradeDialog1WindowClosed
        // TODO add your handling code here:
        tradeDialog1.dispose();
    }//GEN-LAST:event_tradeDialog1WindowClosed

    private void conform2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conform2ActionPerformed
        // TODO add your handling code here:
        randomtradeGNR2("human");
        refreshCube();
    }//GEN-LAST:event_conform2ActionPerformed

    private void tradeDialog2WindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_tradeDialog2WindowClosed
        // TODO add your handling code here:
        tradeDialog2.dispose();
    }//GEN-LAST:event_tradeDialog2WindowClosed

    private void buildButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildButton1ActionPerformed
        // TODO add your handling code here:
        buildTileLess("human",buildingsBox.getSelectedItem().toString().toLowerCase());
        refreshCube();
        if(currentBuildCount==randomBuildCount)
            buildButton.setEnabled(false);
    }//GEN-LAST:event_buildButton1ActionPerformed

    private void buildDialog1WindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_buildDialog1WindowClosed
        // TODO add your handling code here:
        currentBuildCount=0;
        randomBuildCount=1;
        buildButton.setEnabled(true);
        buildDialog1.dispose();
    }//GEN-LAST:event_buildDialog1WindowClosed

    private void goldCube1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goldCube1ActionPerformed
        // TODO add your handling code here:
        playBoard.gather("human", "golden");
        typeSelectDialog.dispose();
    }//GEN-LAST:event_goldCube1ActionPerformed

    private void favorCube1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_favorCube1ActionPerformed
        // TODO add your handling code here:
        playBoard.gather("human", "blue");
        typeSelectDialog.dispose();
    }//GEN-LAST:event_favorCube1ActionPerformed

    private void foodCube1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foodCube1ActionPerformed
        // TODO add your handling code here:
        playBoard.gather("human", "green");
        typeSelectDialog.dispose();
    }//GEN-LAST:event_foodCube1ActionPerformed

    private void woodCube1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_woodCube1ActionPerformed
        // TODO add your handling code here:
        playBoard.gather("human", "orange");
        typeSelectDialog.dispose();
    }//GEN-LAST:event_woodCube1ActionPerformed

    private void typeSelectDialog1WindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_typeSelectDialog1WindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeSelectDialog1WindowClosed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        playBoard.changeHandCard("human", "add", playBoard.drawRcard());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void recruitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recruitActionPerformed
        // TODO add your handling code here:
        idBattleUnitCard("human");
    }//GEN-LAST:event_recruitActionPerformed

    private void playerUnit1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit1MouseClicked
        if (playerUnit1.isEnabled()&&(playerUnit1.getName().equalsIgnoreCase("1"))){
            playerUnit1.setEnabled(false);
            playerUnit1.setName(Integer.toString(0));
        } else {
            playerUnit1.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_playerUnit1MouseClicked

    private void playerUnit1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit1MouseEntered
        playerUnit1.setEnabled(true);
    }//GEN-LAST:event_playerUnit1MouseEntered

    private void playerUnit1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit1MouseExited
        if (!playerUnit1.getName().equalsIgnoreCase("1")){
            playerUnit1.setEnabled(false);
        }
    }//GEN-LAST:event_playerUnit1MouseExited

    private void playerUnit2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit2MouseClicked
        if (playerUnit2.isEnabled()&&(playerUnit2.getName().equalsIgnoreCase("1"))){
            playerUnit2.setEnabled(false);
            playerUnit2.setName(Integer.toString(0));
        } else {
            playerUnit2.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_playerUnit2MouseClicked

    private void playerUnit2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit2MouseEntered
        playerUnit2.setEnabled(true);
    }//GEN-LAST:event_playerUnit2MouseEntered

    private void playerUnit2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit2MouseExited
        if (!playerUnit2.getName().equalsIgnoreCase("1")){
            playerUnit2.setEnabled(false);
        }
    }//GEN-LAST:event_playerUnit2MouseExited

    private void playerUnit3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit3MouseClicked
        if (playerUnit3.isEnabled()&&(playerUnit3.getName().equalsIgnoreCase("1"))){
            playerUnit3.setEnabled(false);
            playerUnit3.setName(Integer.toString(0));
        } else {
            playerUnit3.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_playerUnit3MouseClicked

    private void playerUnit3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit3MouseEntered
        playerUnit3.setEnabled(true);
    }//GEN-LAST:event_playerUnit3MouseEntered

    private void playerUnit3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit3MouseExited
        if (!playerUnit3.getName().equalsIgnoreCase("1")){
            playerUnit3.setEnabled(false);
        }
    }//GEN-LAST:event_playerUnit3MouseExited

    private void playerUnit4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit4MouseClicked
        if (playerUnit4.isEnabled()&&(playerUnit4.getName().equalsIgnoreCase("1"))){
            playerUnit4.setEnabled(false);
            playerUnit4.setName(Integer.toString(0));
        } else {
            playerUnit4.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_playerUnit4MouseClicked

    private void playerUnit4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit4MouseEntered
        playerUnit4.setEnabled(true);
    }//GEN-LAST:event_playerUnit4MouseEntered

    private void playerUnit4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit4MouseExited
        if (!playerUnit4.getName().equalsIgnoreCase("1")){
            playerUnit4.setEnabled(false);
        }
    }//GEN-LAST:event_playerUnit4MouseExited

    private void playerUnit5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit5MouseClicked
        if (playerUnit5.isEnabled()&&(playerUnit5.getName().equalsIgnoreCase("1"))){
            playerUnit5.setEnabled(false);
            playerUnit5.setName(Integer.toString(0));
        } else {
            playerUnit5.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_playerUnit5MouseClicked

    private void playerUnit5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit5MouseEntered
        playerUnit5.setEnabled(true);
    }//GEN-LAST:event_playerUnit5MouseEntered

    private void playerUnit5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit5MouseExited
        if (!playerUnit5.getName().equalsIgnoreCase("1")){
            playerUnit5.setEnabled(false);
        }
    }//GEN-LAST:event_playerUnit5MouseExited

    private void playerUnit6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit6MouseClicked
        if (playerUnit6.isEnabled()&&(playerUnit6.getName().equalsIgnoreCase("1"))){
            playerUnit6.setEnabled(false);
            playerUnit6.setName(Integer.toString(0));
        } else {
            playerUnit6.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_playerUnit6MouseClicked

    private void playerUnit6MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit6MouseEntered
        playerUnit6.setEnabled(true);
    }//GEN-LAST:event_playerUnit6MouseEntered

    private void playerUnit6MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit6MouseExited
        if (!playerUnit6.getName().equalsIgnoreCase("1")){
            playerUnit6.setEnabled(false);
        }
    }//GEN-LAST:event_playerUnit6MouseExited

    private void playerUnit7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit7MouseClicked
        if (playerUnit7.isEnabled()&&(playerUnit7.getName().equalsIgnoreCase("1"))){
            playerUnit7.setEnabled(false);
            playerUnit7.setName(Integer.toString(0));
        } else {
            playerUnit7.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_playerUnit7MouseClicked

    private void playerUnit7MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit7MouseEntered
        playerUnit7.setEnabled(true);
    }//GEN-LAST:event_playerUnit7MouseEntered

    private void playerUnit7MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit7MouseExited
        if (!playerUnit7.getName().equalsIgnoreCase("1")){
            playerUnit7.setEnabled(false);
        }
    }//GEN-LAST:event_playerUnit7MouseExited

    private void playerUnit8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit8MouseClicked
        if (playerUnit8.isEnabled()&&(playerUnit8.getName().equalsIgnoreCase("1"))){
            playerUnit8.setEnabled(false);
            playerUnit8.setName(Integer.toString(0));
        } else {
            playerUnit8.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_playerUnit8MouseClicked

    private void playerUnit8MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit8MouseEntered
        playerUnit8.setEnabled(true);
    }//GEN-LAST:event_playerUnit8MouseEntered

    private void playerUnit8MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit8MouseExited
        if (!playerUnit8.getName().equalsIgnoreCase("1")){
            playerUnit8.setEnabled(false);
        }
    }//GEN-LAST:event_playerUnit8MouseExited

    private void playerUnit9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit9MouseClicked
        if (playerUnit9.isEnabled()&&(playerUnit9.getName().equalsIgnoreCase("1"))){
            playerUnit9.setEnabled(false);
            playerUnit9.setName(Integer.toString(0));
        } else {
            playerUnit9.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_playerUnit9MouseClicked

    private void playerUnit9MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit9MouseEntered
        playerUnit9.setEnabled(true);
    }//GEN-LAST:event_playerUnit9MouseEntered

    private void playerUnit9MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit9MouseExited
        if (!playerUnit9.getName().equalsIgnoreCase("1")){
            playerUnit9.setEnabled(false);
        }
    }//GEN-LAST:event_playerUnit9MouseExited

    private void playerUnit10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit10MouseClicked
        if (playerUnit10.isEnabled()&&(playerUnit10.getName().equalsIgnoreCase("1"))){
            playerUnit10.setEnabled(false);
            playerUnit10.setName(Integer.toString(0));
        } else {
            playerUnit10.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_playerUnit10MouseClicked

    private void playerUnit10MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit10MouseEntered
        playerUnit10.setEnabled(true);
    }//GEN-LAST:event_playerUnit10MouseEntered

    private void playerUnit10MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit10MouseExited
        if (!playerUnit10.getName().equalsIgnoreCase("1")){
            playerUnit10.setEnabled(false);
        }
    }//GEN-LAST:event_playerUnit10MouseExited

    private void playerUnit11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit11MouseClicked
        if (playerUnit11.isEnabled()&&(playerUnit11.getName().equalsIgnoreCase("1"))){
            playerUnit11.setEnabled(false);
            playerUnit11.setName(Integer.toString(0));
        } else {
            playerUnit11.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_playerUnit11MouseClicked

    private void playerUnit11MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit11MouseEntered
        playerUnit11.setEnabled(true);
    }//GEN-LAST:event_playerUnit11MouseEntered

    private void playerUnit11MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit11MouseExited
        if (!playerUnit11.getName().equalsIgnoreCase("1")){
            playerUnit11.setEnabled(false);
        }
    }//GEN-LAST:event_playerUnit11MouseExited

    private void playerUnit12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit12MouseClicked
        if (playerUnit12.isEnabled()&&(playerUnit12.getName().equalsIgnoreCase("1"))){
            playerUnit12.setEnabled(false);
            playerUnit12.setName(Integer.toString(0));
        } else {
            playerUnit12.setName(Integer.toString(1));
        }
    }//GEN-LAST:event_playerUnit12MouseClicked

    private void playerUnit12MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit12MouseEntered
        playerUnit12.setEnabled(true);
    }//GEN-LAST:event_playerUnit12MouseEntered

    private void playerUnit12MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerUnit12MouseExited
        if (!playerUnit12.getName().equalsIgnoreCase("1")){
            playerUnit12.setEnabled(false);
        }
    }//GEN-LAST:event_playerUnit12MouseExited

    private void battleUnitDialogWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_battleUnitDialogWindowClosed
        if (!playBoard.getplayerUnit("human").isEmpty()){
        if ((aiUnitCount !=0)&&(playerUnitCount != 0)){
            updateBattleUnit();
            battleUnitDialog.setVisible(true);
        } else if ((aiUnitCount != 0)&&(playerUnitCount == 0)){
            JOptionPane.showMessageDialog(
                        null, "Battle Loss" , "Information",
                        JOptionPane.WARNING_MESSAGE);
        } else if ((aiUnitCount == 0)&&(playerUnitCount != 0)){
            JOptionPane.showMessageDialog(
                        null, "Battle Win" , "Information",
                        JOptionPane.WARNING_MESSAGE);
        }
        }
    }//GEN-LAST:event_battleUnitDialogWindowClosed

    private void toAI1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toAI1ActionPerformed
        battleUnitDialog.setVisible(true);
        attackBattleArmy("human","ai1");      
        whichAI = "ai1";
    }//GEN-LAST:event_toAI1ActionPerformed

    private void toAI2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toAI2ActionPerformed
        battleUnitDialog.setVisible(true);
        attackBattleArmy("human","ai2");       
        whichAI = "ai2";
    }//GEN-LAST:event_toAI2ActionPerformed

    private void aiBattleSelectWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_aiBattleSelectWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_aiBattleSelectWindowClosed

    private void selectPlayerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectPlayerItemStateChanged
        // TODO add your handling code here:
        selectBuilding.removeAllItems();
        ArrayList<MBproduction.buildingType> building = new ArrayList<>();
        building=playBoard.getBuilding(selectPlayer.getSelectedIndex());
        for(int i=0;i<building.size();i++)
        {
            MBproduction.buildingType a=building.get(i);
            selectBuilding.addItem(playBoard.getName(a));
        }
    }//GEN-LAST:event_selectPlayerItemStateChanged

    private void selectPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectPlayerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectPlayerActionPerformed

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        // TODO add your handling code here:
        if(selectPlayer.getSelectedIndex()==0)
        {
            playBoard.removeBuilding("human", selectBuilding.getSelectedIndex());
            removeTile("human",selectBuilding.getSelectedIndex(),"city");
        }
        if(selectPlayer.getSelectedIndex()==1)
        {
            playBoard.removeBuilding("ai1", selectBuilding.getSelectedIndex());
            removeTile("ai1",selectBuilding.getSelectedIndex(),"city");
        }
        if(selectPlayer.getSelectedIndex()==2)
        {
            playBoard.removeBuilding("ai2", selectBuilding.getSelectedIndex());
            removeTile("ai2",selectBuilding.getSelectedIndex(),"city");
        }
        selectPlayer.setVisible(true);
        remove.setVisible(true);
        destroyBuilding.dispose();
    }//GEN-LAST:event_removeActionPerformed

    private void destroyBuildingWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_destroyBuildingWindowClosed
        // TODO add your handling code here:
        selectPlayer.setVisible(true);
        remove.setVisible(true);
    }//GEN-LAST:event_destroyBuildingWindowClosed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        AIturn(cpuTurns);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Metal look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mythologyBattleGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mythologyBattleGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mythologyBattleGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mythologyBattleGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mythologyBattleGui().setVisible(true);
                cultureDialog.setVisible(true);
            }
        });
    }

/******************************************************************************/
    //clear all JLabel text before GUI showed.
    protected void labelClear(){
        N11.setText(null);N12.setText(null);N13.setText(null);N14.setText(null);
        N21.setText(null);N22.setText(null);N23.setText(null);N24.setText(null);
        N31.setText(null);N32.setText(null);N33.setText(null);N34.setText(null);
        N41.setText(null);N42.setText(null);N43.setText(null);N44.setText(null);
        n11.setText(null);n12.setText(null);n13.setText(null);n14.setText(null);
        n21.setText(null);n22.setText(null);n23.setText(null);n24.setText(null);
        n31.setText(null);n32.setText(null);n33.setText(null);n34.setText(null);
        n41.setText(null);n42.setText(null);n43.setText(null);n44.setText(null);
        G11.setText(null);G12.setText(null);G13.setText(null);G14.setText(null);
        G21.setText(null);G22.setText(null);G23.setText(null);G24.setText(null);
        G31.setText(null);G32.setText(null);G33.setText(null);G34.setText(null);
        G41.setText(null);G42.setText(null);G43.setText(null);G44.setText(null);
        g11.setText(null);g12.setText(null);g13.setText(null);g14.setText(null);
        g21.setText(null);g22.setText(null);g23.setText(null);g24.setText(null);
        g31.setText(null);g32.setText(null);g33.setText(null);g34.setText(null);
        g41.setText(null);g42.setText(null);g43.setText(null);g44.setText(null);
        E11.setText(null);E12.setText(null);E13.setText(null);E14.setText(null);
        E21.setText(null);E22.setText(null);E23.setText(null);E24.setText(null);
        E31.setText(null);E32.setText(null);E33.setText(null);E34.setText(null);
        E41.setText(null);E42.setText(null);E43.setText(null);E44.setText(null);
        e11.setText(null);e12.setText(null);e13.setText(null);e14.setText(null);
        e21.setText(null);e22.setText(null);e23.setText(null);e24.setText(null);
        e31.setText(null);e32.setText(null);e33.setText(null);e34.setText(null);
        e41.setText(null);e42.setText(null);e43.setText(null);e44.setText(null);
    }
   
    //fetch needed Component, group them together and add them to JLabel set.
    protected void groupBoardArea(){
        for (int i = 0; i < norseCityArea.getComponents().length; i++){
            if (norseCityArea.getComponent(i) instanceof JLabel){
                norseCity.add((JLabel)norseCityArea.getComponent(i));
            }
        }
        for (int i = 0; i < greekCityArea.getComponents().length; i++){
            if (greekCityArea.getComponent(i) instanceof JLabel){
                greekCity.add((JLabel)greekCityArea.getComponent(i));
            }
        }
        for (int i = 0; i < egyptCityArea.getComponents().length; i++){
            if (egyptCityArea.getComponent(i) instanceof JLabel){
                egyptCity.add((JLabel)egyptCityArea.getComponent(i));
            }
        }
        for (int i = 0; i < norseProductArea.getComponents().length; i++){
            if (norseProductArea.getComponent(i) instanceof JLabel){
                norseProduction.add((JLabel)norseProductArea.getComponent(i));
            }
        }
        for (int i = 0; i < greekProductArea.getComponents().length; i++){
            if (greekProductArea.getComponent(i) instanceof JLabel){
                greekProduction.add((JLabel)greekProductArea.getComponent(i));
            }
        }
        for (int i = 0; i < egyptProductArea.getComponents().length; i++){
            if (egyptProductArea.getComponent(i) instanceof JLabel){
                egyptProduction.add((JLabel)egyptProductArea.getComponent(i));
            }
        }
    }   
    
    protected void clearTile(){
        p1.setIcon(null);p2.setIcon(null);p3.setIcon(null);p4.setIcon(null);
        p5.setIcon(null);p6.setIcon(null);p7.setIcon(null);p8.setIcon(null);
        p9.setIcon(null);p10.setIcon(null);p11.setIcon(null);p12.setIcon(null);
        p13.setIcon(null);p14.setIcon(null);p15.setIcon(null);p16.setIcon(null);
        p17.setIcon(null);p18.setIcon(null);
        p1.setEnabled(true);p2.setEnabled(true);p3.setEnabled(true);p4.setEnabled(true);
        p5.setEnabled(true);p6.setEnabled(true);p7.setEnabled(true);p8.setEnabled(true);
        p9.setEnabled(true);p10.setEnabled(true);p11.setEnabled(true);p12.setEnabled(true);
        p13.setEnabled(true);p14.setEnabled(true);p15.setEnabled(true);p16.setEnabled(true);
        p17.setEnabled(true);p18.setEnabled(true);
        roundCounter = 0;
        stackAI.clear();
    }
    
    protected void AISequence(){       
        for (int i = 0; i < stackAI.size(); i++){
            boolean temp = false;
            temp = selectTile("ai1",(int)stackAI.get(i),"production",null);
            if (temp){
                break;
            }
        }
        for (int i = 0; i < stackAI.size(); i++){
            boolean temp = false;
            temp = selectTile("ai2",(int)stackAI.get(i),"production",null);
            if (temp){
                break;
            }
        }
        for (int i = 0; i < stackAI.size(); i++){
            boolean temp = false;
            temp = selectTile("ai2",(int)stackAI.get(i),"production",null);
            if (temp){
                break;
            }
        }
        for (int i = 0; i < stackAI.size(); i++){
            boolean temp = false;
            temp = selectTile("ai1",(int)stackAI.get(i),"production",null);
            if (temp){
                break;
            }
        }
    }
    /****************************************/
    //This function has been modified
    //place correlated image to JLabel.
    protected boolean selectTile(String player, int coordinate, String area, MBproduction.buildingType build){
        String culture = null;
        boolean AIflag = false;
        boolean placeFlag = false;
        MBproduction.terrainTypeEnum selected;
        String normalizeSelected;
        /*******************************/
        player=player.toLowerCase();
        switch(player.toLowerCase()){
            case"human":
                culture = playBoard.humanCulture();
                break;
            case"ai1":
                culture = playBoard.AICulture1();
                break;
            case"ai2":
                culture = playBoard.AICulture2();
                break;
            default:
                break;
        }
        selected = playBoard.getIndiTerrain(coordinate);
        normalizeSelected = 
               selected.toString().substring(0, selected.toString().length()-1);
        switch(culture.toLowerCase()){
            //norse
            case"norse":
                switch(area.toLowerCase()){
                    case"production":
                        for (int i = 0; i < norseProduction.size(); i ++){
                           if (norseProduction.get(i).getName().equalsIgnoreCase(normalizeSelected)){
                               norseProduction.get(i).setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(selected.getPath())));
                               norseProduction.remove(i);
                               playBoard.updateProductionResourceCube(player, selected);
                               playBoard.exileTerrain(selected);                               
                               tileSelection.get(coordinate).setEnabled(false);
                               stackAI.remove(stackAI.indexOf(coordinate));
                               placeFlag = true;AIflag = true;
                               break;
                           }
                        }
                        break;
                    //!!!!!!!!WARNNING!!!!!!!! NEED TO MODIFY FOR ITERATION II
                    case"city":
                        for (int i = 0; i < norseCity.size(); i ++){
                            if (norseCity.get(i).getIcon() == null){
                               norseCity.get(i).setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(build.getPath())));
                               placeFlag = true;
                               break;
                            }
                        }
                        break;
                    default:
                        break;
                }
                break;
            //greek    
            case"greek":
                switch(area.toLowerCase()){
                    case"production":
                        for (int i = 0; i < greekProduction.size(); i ++){
                           if (greekProduction.get(i).getName().equalsIgnoreCase(normalizeSelected)){
                               greekProduction.get(i).setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(selected.getPath())));
                               greekProduction.remove(i);
                               playBoard.updateProductionResourceCube(player, selected);
                               playBoard.exileTerrain(selected);                              
                               tileSelection.get(coordinate).setEnabled(false);
                               stackAI.remove(stackAI.indexOf(coordinate));
                               placeFlag = true;AIflag = true;
                               break;
                           }
                        }
                        break;
                    //!!!!!!!!WARNNING!!!!!!!! NEED TO MODIFY FOR ITERATION II
                    case"city":
                        for (int i = 0; i < greekCity.size(); i ++){
                           if (greekCity.get(i).getIcon() == null){
                               greekCity.get(i).setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(build.getPath())));
                               placeFlag = true;
                               break;
                           } 
                        }
                        break;
                    default:
                        break;
                }
                break;
            //egypt
            case"egypt":
                switch(area.toLowerCase()){
                    case"production":
                        for (int i = 0; i < egyptProduction.size(); i ++){
                           if (egyptProduction.get(i).getName().equalsIgnoreCase(normalizeSelected)){
                               egyptProduction.get(i).setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(selected.getPath())));
                               playBoard.updateProductionResourceCube(player, selected);
                               playBoard.exileTerrain(selected);
                               egyptProduction.remove(i);
                               tileSelection.get(coordinate).setEnabled(false);
                               stackAI.remove(stackAI.indexOf(coordinate));
                               placeFlag = true;AIflag = true;
                               break;                          
                           }
                        }
                        break;
                    //!!!!!!!!WARNNING!!!!!!!! NEED TO MODIFY FOR ITERATION II
                    case"city":
                        for (int i = 0; i < egyptCity.size(); i ++){
                           if (egyptCity.get(i).getIcon() == null){
                               egyptCity.get(i).setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(build.getPath())));
                               placeFlag = true;
                               break;
                           } 
                        }
                        break;
                    default:
                        break;
                }
                break;
            default:
                break;
        }
        if ((!placeFlag)&&(player.equalsIgnoreCase("human"))){
            JOptionPane.showMessageDialog(
                    null, "No suitable tile for " + player , "Information",
                    JOptionPane.WARNING_MESSAGE);
        }
        return AIflag; 
    }
    
    protected void placeTile(int tile){
        ArrayList<String> localPath = new ArrayList<>();
        ArrayList<JLabel> localSelection = new ArrayList<>();
        localPath = playBoard.fetchTilePicPath(tile);
        localSelection = groupProductionSelection();
        for (int i = 0; i < tile; i++){
            localSelection.get(i).setIcon(new javax.swing.ImageIcon(
                    getClass().getResource(localPath.get(i))));
        }
    }
    
    protected ArrayList<JLabel> groupProductionSelection(){
        ArrayList<JLabel> production = new ArrayList<>();
        for (int i = 0; i < productionDisplay.getComponents().length; i++){
            production.add((JLabel)productionDisplay.getComponent(i));
        }
        tileSelection = production;
        return production;
    }
    
    //tile pool index
    protected void initRan(int init){
        for (int i = 0; i < init; i ++){
            stackAI.add(i);
        }
    }
    //update resource indicator for each player
    protected void updateCube(String player, String color, int cube){
        playBoard.setCube(player, color, cube);
        refreshCube();
    }
    
    protected void initCultureLabel(){
        //Label human culture
        switch(playBoard.humanCulture()){
            case"norse":
                hCultureLabel.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource("/mythologybattle/resource/Norse.png")));
            break;
            case"greek":
                hCultureLabel.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource("/mythologybattle/resource/Greek.png")));
            break;
            case"egypt":
                hCultureLabel.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource("/mythologybattle/resource/Egyptian.png")));
            break;
        }
        //Label AI1 culture
        switch(playBoard.AICulture1()){
            case"norse":
                ai1CultureLabel.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource("/mythologybattle/resource/Norse.png")));
            break;
            case"greek":
                ai1CultureLabel.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource("/mythologybattle/resource/Greek.png")));
            break;
            case"egypt":
                ai1CultureLabel.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource("/mythologybattle/resource/Egyptian.png")));
            break;
        }
        //Label AI2 culture
        switch(playBoard.AICulture2()){
            case"norse":
                ai2CultureLabel.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource("/mythologybattle/resource/Norse.png")));
            break;
            case"greek":
                ai2CultureLabel.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource("/mythologybattle/resource/Greek.png")));
            break;
            case"egypt":
                ai2CultureLabel.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource("/mythologybattle/resource/Egyptian.png")));
            break;
        }
    }
    //update vectory card points
    protected void updateCubeOnCard(String player, String card, int cube){
        playBoard.setCubeOnCard(player, card, cube);
        if (player.equalsIgnoreCase("human")){  
            switch(card){
                case"tla":
                    redCubeOnTLA.setText(Integer.toString(playBoard.getVectCube(player, "tla")));
                break;
                case"mb":
                    redCubeOnTMB.setText(Integer.toString(playBoard.getVectCube(player, "mb")));
                break;
                case"tw":
                    redCubeOnTW.setText(Integer.toString(playBoard.getVectCube(player, "tw")));
                break;
                case"tlb":
                    redCubeOnTLB.setText(Integer.toString(playBoard.getVectCube(player, "tlb")));
                break;
                default:
                break;
        }
      }
    }
    
    protected void updatePermaCard(){     
        ArrayList<MBcard.card> pCard = new ArrayList<>();
        pCard = playBoard.getPermaCardGp(playBoard.humanCulture());
        permaCard1.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(pCard.get(0).getPath())));
        permaCard2.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(pCard.get(1).getPath())));
        permaCard3.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(pCard.get(2).getPath())));
        permaCard4.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(pCard.get(3).getPath())));
        permaCard5.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(pCard.get(4).getPath())));
        permaCard6.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(pCard.get(5).getPath())));
        permaCard7.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(pCard.get(6).getPath())));
        currAge.setText(playBoard.getAge("human").toUpperCase() + " Age");
        //display current age and number of cards can be selected
        switch(playBoard.getAge("human")){
            case"archaic":
                cardLeftAge.setText(Integer.toString(4) + " can be selected");
            break;
            case"classical":
                cardLeftAge.setText(Integer.toString(5) + " can be selected");
            break;
            case"heroic":
                cardLeftAge.setText(Integer.toString(6) + " can be selected");
            break;
            case"mythic":
                cardLeftAge.setText(Integer.toString(7) + " can be selected");
            break;
            default:
            break;
        }
    }
    
    protected ArrayList<JLabel> groupHandCard(){
        ArrayList<JLabel> handCardArea = new ArrayList<>();
        for (int i = 0; i < handCardPane.getComponents().length; i++){
            handCardArea.add((JLabel)handCardPane.getComponent(i));
        }
        return handCardArea;
    }
    
    protected void updateHandCard(){
        ArrayList<MBcard.card> hCard = new ArrayList<>();
        hCard = playBoard.getHandCardGp("human");
        for (int i = 0; i < groupHandCard().size(); i++){           
            groupHandCard().get(i).setIcon(null);
            groupHandCard().get(i).setEnabled(false);
            groupHandCard().get(i).setName(Integer.toString(0));
        }
        for (int i = 0; i < hCard.size(); i++){           
            groupHandCard().get(i).setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(hCard.get(i).getPath())));
        }       
    }
    
    protected void refreshCube(){
        hOrangeCube.setText  (Integer.toString(playBoard.getcube("human","orange")));
        hBlueCube.setText    (Integer.toString(playBoard.getcube("human","blue")));
        hGreenCube.setText   (Integer.toString(playBoard.getcube("human","green")));
        hGoldenCube.setText  (Integer.toString(playBoard.getcube("human","golden")));
        hRedCube.setText     (Integer.toString(playBoard.getcube("human","red")));
        ai1OrangeCube.setText(Integer.toString(playBoard.getcube("ai1"  ,"orange")));
        ai1BlueCube.setText  (Integer.toString(playBoard.getcube("ai1"  ,"blue" )));
        ai1GreenCube.setText (Integer.toString(playBoard.getcube("ai1"  ,"green")));
        ai1GoldenCube.setText(Integer.toString(playBoard.getcube("ai1"  ,"golden")));
        ai1RedCube.setText   (Integer.toString(playBoard.getcube("ai1"  ,"red")));
        ai2OrangeCube.setText(Integer.toString(playBoard.getcube("ai2"  ,"orange")));
        ai2BlueCube.setText  (Integer.toString(playBoard.getcube("ai2"  ,"blue")));
        ai2GreenCube.setText (Integer.toString(playBoard.getcube("ai2"  ,"green")));
        ai2GoldenCube.setText(Integer.toString(playBoard.getcube("ai2"  ,"golden")));
        ai2RedCube.setText   (Integer.toString(playBoard.getcube("ai2"  ,"red")));
    }
    
    protected void removeHandCard(String player, MBcard.card hCard){
        playBoard.removeHandCard(player, hCard);
    }
    
    protected void tradeCube(String player){
        String cubeToR = null,cubeToA = null,cubeConsume = null;
        int tradeCost;
        switch(cubeLeft.getSelectedItem().toString().toLowerCase()){
            case"favor":
                cubeToR = "blue";
            break;
            case"food":
                cubeToR = "green";
            break;
            case"wood":
                cubeToR = "orange";
            break;
            case"gold":
                cubeToR = "golden";
            break;
            default:
            break;
        }
        switch(cubeRight.getSelectedItem().toString().toLowerCase()){
            case"favor":
                cubeToA = "blue";
            break;
            case"food":
                cubeToA = "green";
            break;
            case"wood":
                cubeToA = "orange";
            break;
            case"gold":
                cubeToA = "golden";
            break;
            default:
            break;
        }
        switch(consume.getSelectedItem().toString().toLowerCase()){
            case"favor":
                cubeConsume = "blue";
            break;
            case"food":
                cubeConsume = "green";
            break;
            case"wood":
                cubeConsume = "orange";
            break;
            case"gold":
                cubeConsume = "golden";
            break;
            default:
            break;
        }
        //Check for market
        if (playBoard.checkBuilding(player, MBproduction.buildingType.market) != -1){
            tradeCost = 0;
        } else {
            tradeCost = -2;
        }
        playBoard.trade(player, cubeConsume, tradeCost, cubeToR, -(tradeSlider.getValue()), cubeToA, tradeSlider.getValue());
    }
    
    /*********************************************************/
    protected void buildTile(String player, String building){
        switch(building){
            case"armory":
                if(playBoard.build(player, building))
                {
                    currentBuildCount++;
                    selectTile(player,0,"city",MBproduction.buildingType.armory);
                }
            break;
            case"woodwork":
                if(playBoard.build(player, building))
                {
                    currentBuildCount++;
                    selectTile(player,0,"city",MBproduction.buildingType.woodWork);
                }
            break;
            case"market":
                if(playBoard.build(player, building))
                {
                    currentBuildCount++;
                    selectTile(player,0,"city",MBproduction.buildingType.market);
                }
            break;
            case"house":
                if(playBoard.build(player, building))
                {
                    currentBuildCount++;
                    selectTile(player,0,"city",MBproduction.buildingType.house);
                }
            break;
            case"monument":
                if(playBoard.build(player, building))
                {
                    currentBuildCount++;
                    selectTile(player,0,"city",MBproduction.buildingType.monument);
                }
            break;
            case"granary":
                if(playBoard.build(player, building))
                {
                    selectTile(player,0,"city",MBproduction.buildingType.granary);
                currentBuildCount++;
                }
            break;
            case"storehouse":
                if(playBoard.build(player, building))
                {
                selectTile(player,0,"city",MBproduction.buildingType.storeHouse);
                currentBuildCount++;
                }
            break;
            case"siegeengine":
                if(playBoard.build(player, building))
                {
                selectTile(player,0,"city",MBproduction.buildingType.siegeEngine);
                currentBuildCount++;
                }
            break;
            case"greattemple":
                if(playBoard.build(player, building))
                {
                selectTile(player,0,"city",MBproduction.buildingType.greatTemple);
                currentBuildCount++;
                }
            break;
            case"wall":
                if(playBoard.build(player, building))
                {
                    currentBuildCount++;
                selectTile(player,0,"city",MBproduction.buildingType.wall);
                }
            break;
            case"wonder":
                if(playBoard.build(player, building))
                {
                    currentBuildCount++;
                selectTile(player,0,"city",MBproduction.buildingType.wonder);
                JOptionPane.showMessageDialog(
                        null, "You Win the Whole Game" , "Information",
                        JOptionPane.WARNING_MESSAGE);
                }
            break;
            case"goldmint":
                if(playBoard.build(player, building))
                {
                    currentBuildCount++;
                selectTile(player,0,"city",MBproduction.buildingType.goldMint);
                }
            break;
            case"quarry":
                if(playBoard.build(player, building))
                {
                    currentBuildCount++;
                selectTile(player,0,"city",MBproduction.buildingType.quarry);
                }
            break;
            case"tower":
                if(playBoard.build(player, building))
                {
                    currentBuildCount++;
                selectTile(player,0,"city",MBproduction.buildingType.tower);
                }
            break;
            default:
            break;                
        }
    }
    
    protected void updateBattleCard(String culture){
               
        ArrayList<MBcard.battleCard> bCard = new ArrayList<>();
        bCard = playBoard.getBattleUnit(culture);
        battleUnit1.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(bCard.get(0).getPath())));
        battleUnit2.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(bCard.get(1).getPath())));
        battleUnit3.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(bCard.get(2).getPath())));
        battleUnit4.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(bCard.get(3).getPath())));
        battleUnit5.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(bCard.get(4).getPath())));
        battleUnit6.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(bCard.get(5).getPath())));
        battleUnit7.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(bCard.get(6).getPath())));
        battleUnit8.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(bCard.get(7).getPath())));
        battleUnit9.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(bCard.get(8).getPath())));
        battleUnit10.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(bCard.get(9).getPath())));
        battleUnit11.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(bCard.get(10).getPath())));
        if (!culture.equalsIgnoreCase("norse")){
            battleUnit12.setIcon(new javax.swing.ImageIcon(
                               getClass().getResource(bCard.get(11).getPath())));
        }
    }   
    
    protected void updateBattleUnit(){
        playerUnit1.setIcon(null);
        playerUnit2.setIcon(null);
        playerUnit3.setIcon(null);
        playerUnit4.setIcon(null);
        playerUnit5.setIcon(null);
        playerUnit6.setIcon(null);
        playerUnit7.setIcon(null);
        playerUnit8.setIcon(null);
        playerUnit9.setIcon(null);
        playerUnit10.setIcon(null);
        playerUnit11.setIcon(null);
        playerUnit12.setIcon(null);
        ArrayList<MBcard.battleCard> bUnit = new ArrayList<>();
        bUnit = playBoard.getplayerUnit("human");
        for (int i = 0; i < bUnit.size(); i++){
            ((JLabel)battleUnitPane.getComponent(i)).setIcon(
                    new javax.swing.ImageIcon(
                               getClass().getResource(bUnit.get(i).getPath())));
        }
    }
    
    protected void idBattleUnitCard(String player){
        for (int i = 0; i < battleCardPane.getComponents().length-1; i++){
            if(battleCardPane.getComponent(i).isEnabled()){
                if(currentRecruitCount<randomRecruitCount)
                {
                if(playBoard.recruit(player, playBoard.getBattleUnit(playBoard.humanCulture()).get(i)))
                    currentRecruitCount++;
                }
                else
                {
                    recruit.setEnabled(false);
                    JOptionPane.showMessageDialog(
                    null, "You can only recruit "+randomRecruitCount+" Battle Units", "Information",
                    JOptionPane.WARNING_MESSAGE);
                }
            }
        }
        refreshCube();
    }
    
    protected void endTurn(String player){
        if (playBoard.getcube(player, "orange") > 5){
            playBoard.setCube(player, "orange", 5);
        }
        if (playBoard.getcube(player, "blue") > 5){
            playBoard.setCube(player, "blue", 5);
        }
        if (playBoard.getcube(player, "green") > 5){
            playBoard.setCube(player, "green", 5);
        }
        if (playBoard.getcube(player, "golden") > 5){
            playBoard.setCube(player, "golden", 5);
        }
        if (player.equalsIgnoreCase("human")){
            
        } else {
        if (playBoard.getcube("ai1", "orange") > 5){
            playBoard.setCube("ai1", "orange", 5);
        }
        if (playBoard.getcube("ai1", "blue") > 5){
            playBoard.setCube("ai1", "blue", 5);
        }
        if (playBoard.getcube("ai1", "green") > 5){
            playBoard.setCube("ai1", "green", 5);
        }
        if (playBoard.getcube("ai1", "golden") > 5){
            playBoard.setCube("ai1", "golden", 5);
        }
        if (playBoard.getcube("ai2", "orange") > 5){
            playBoard.setCube("ai2", "orange", 5);
        }
        if (playBoard.getcube("ai2", "blue") > 5){
            playBoard.setCube("ai2", "blue", 5);
        }
        if (playBoard.getcube("ai2", "green") > 5){
            playBoard.setCube("ai2", "green", 5);
        }
        if (playBoard.getcube("ai2", "golden") > 5){
            playBoard.setCube("ai2", "golden", 5);
        }
        }
        
        for (int i = 0; i < handCardPane.getComponents().length; i++){           
            ((JLabel)handCardPane.getComponent(i)).setIcon(null);
            handCardPane.getComponent(i).setEnabled(false);
            handCardPane.getComponent(i).setName(Integer.toString(0));
            handCardPane.setName(Integer.toString(1));
        }
        playBoard.removeHandCard(player);
        cpuTurns = 0;
        playerTurn = 3;
    }
    //modified-----
    protected void attackBattleArmy(String attacker, String attackee){
        MBcard.battleCard playerUnit;
        String result;
        
        for (int i = 0; i < battleUnitPane.getComponents().length; i ++){
            if (battleUnitPane.getComponent(i).isEnabled()){
                playerUnit = playBoard.getplayerUnit(attacker).get(i);
                result = playBoard.groupAttackUnit(playerUnit, attackee, aiUnitCount);
                if (result.equalsIgnoreCase(attacker)){
                    JOptionPane.showMessageDialog(
                        null, "You win" , "Information",
                        JOptionPane.WARNING_MESSAGE);
                    aiUnitCount --;
                    break;
                } else if (result.equalsIgnoreCase(attackee)){
                    JOptionPane.showMessageDialog(
                        null, "You lost " + playerUnit.toString(), "Information",
                        JOptionPane.WARNING_MESSAGE);
                    playerUnitCount --;
                    break;                   
                }
            }
        }
    }
    //modified----
    protected void setAttackArmy(int playerArmy, int aiArmy){
        playerUnitCount = playerArmy;
        aiUnitCount = aiArmy;
    }
    
    /****************************************/ //modified----
    protected void idSelectedCard(String player){
        for (int i = 0; i < handCardPane.getComponents().length; i++){
            if(handCardPane.getComponent(i).isEnabled()){
                if (playBoard.getHandCardGp("human").get(i) == MBcard.card.Ggather
                        ||playBoard.getHandCardGp("human").get(i) == MBcard.card.Egather
                        ||playBoard.getHandCardGp("human").get(i) == MBcard.card.Ngather)
                {
                    playerTurn--;
                    typeSelectDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                } else if (playBoard.getHandCardGp("human").get(i) == MBcard.card.Gattack
                         ||playBoard.getHandCardGp("human").get(i) == MBcard.card.Eattack
                         ||playBoard.getHandCardGp("human").get(i) == MBcard.card.Nattack)
                {
                    playerTurn--;
                    updateBattleUnit();
                    setAttackArmy(4,4);
                    aiBattleSelect.setVisible(true);                   
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                } else if (playBoard.getHandCardGp("human").get(i) == MBcard.card.Gtrade
                         ||playBoard.getHandCardGp("human").get(i) == MBcard.card.Etrade
                         ||playBoard.getHandCardGp("human").get(i) == MBcard.card.Ntrade){
                    playerTurn--;
                    tradeDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                } else if (playBoard.getHandCardGp("human").get(i) == MBcard.card.Gbuild
                         ||playBoard.getHandCardGp("human").get(i) == MBcard.card.Ebuild
                         ||playBoard.getHandCardGp("human").get(i) == MBcard.card.Nbuild)
                {
                    playerTurn--;
                    randomBuildCount=1;
                    buildDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                } else if (playBoard.getHandCardGp("human").get(i) == MBcard.card.Gnextage
                         ||playBoard.getHandCardGp("human").get(i) == MBcard.card.Enextage
                         ||playBoard.getHandCardGp("human").get(i) == MBcard.card.Nnextage)
                {
                    playerTurn--;
                    playBoard.nextAge("human");
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                } else if (playBoard.getHandCardGp("human").get(i) == MBcard.card.Gexplore
                         ||playBoard.getHandCardGp("human").get(i) == MBcard.card.Eexplore
                         ||playBoard.getHandCardGp("human").get(i) == MBcard.card.Nexplore)
                {
                    playerTurn--;
                    placeTile(4);
                    initRan(4);
                    productionDisplay.setName(Integer.toString(1));
                    productionFrame.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                } else if (playBoard.getHandCardGp("human").get(i) == MBcard.card.Grecruit
                         ||playBoard.getHandCardGp("human").get(i) == MBcard.card.Erecruit
                         ||playBoard.getHandCardGp("human").get(i) == MBcard.card.Nrecruit)
                {
                    randomRecruitCount=2;
                    playerTurn--;
                    updateBattleCard(playBoard.humanCulture());
                    battleCardDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                    /*******************************************/
                }else if(playBoard.getHandCardGp("human").get(i) == MBcard.card.EtradeR1
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.NtradeR1
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.GtradeR1)
                {
                    playerTurn--;
                    tradeDialog1.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                }else if(playBoard.getHandCardGp("human").get(i) == MBcard.card.NtradeR2
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.GtradeR2)
                {
                    playerTurn--;
                    tradeDialog2.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                }else if(playBoard.getHandCardGp("human").get(i) == MBcard.card.GbuildR1
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.EbuildR1
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.NbuildR1)
                {
                    playerTurn--;
                    randomBuildCount=2;
                    buildDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                }else if(playBoard.getHandCardGp("human").get(i) == MBcard.card.GbuildR2
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.EbuildR2
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.NbuildR2)
                {
                    playerTurn--;
                    randomBuildCount=3;
                    buildDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                }else if(playBoard.getHandCardGp("human").get(i) == MBcard.card.GbuildR3
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.EbuildR3
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.NbuildR3)
                {
                    playerTurn--;
                    randomBuildCount=4;
                    buildDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                }else if(playBoard.getHandCardGp("human").get(i) == MBcard.card.GbuildR4)
                {
                    playerTurn--;
                    randomBuildCount=3;
                    buildDialog.setVisible(true);
                    buildTile(player,"house");
                    playBoard.setCube(player, "orange", 2);
                    playBoard.setCube(player, "green", 2);
                    playBoard.randomCost(player,-1);
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                    refreshCube();
                }
                else if(playBoard.getHandCardGp("human").get(i) == MBcard.card.EbuildR4)
                {
                    playerTurn--;
                    randomBuildCount=3;
                    buildDialog1.setVisible(true);
                    playBoard.randomCost(player,-2);
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                    refreshCube();
                    
                }else if(playBoard.getHandCardGp("human").get(i) == MBcard.card.GgatherR1
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.EgatherR1
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.NgatherR1)
                {
                    playerTurn--;
                    playBoard.gather("human", "blue");
                    playBoard.gather("human", "orange");
                    playBoard.gather("human", "golden");
                    playBoard.gather("human", "green");
                    playBoard.gather("ai1", "blue");
                    playBoard.gather("ai1", "orange");
                    playBoard.gather("ai1", "golden");
                    playBoard.gather("ai1", "green");
                    playBoard.gather("ai2", "blue");
                    playBoard.gather("ai2", "orange");
                    playBoard.gather("ai2", "golden");
                    playBoard.gather("ai2", "green");
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                }else if(playBoard.getHandCardGp("human").get(i) == MBcard.card.GgatherR2)
                {
                    playerTurn--;
                    playBoard.setCube(player, "green", 5);
                    playBoard.randomCost(player,-1);
                    typeSelectDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                }else if(playBoard.getHandCardGp("human").get(i) == MBcard.card.GgatherR4)
                {
                    playerTurn--;
                    playBoard.randomCost(player,-2);
                    playBoard.gather("human", "green");
                    playBoard.gainFoodPerFoodtile(player,1);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                }else if(playBoard.getHandCardGp("human").get(i) == MBcard.card.EgatherR2)
                {
                    playerTurn--;
                    playBoard.randomCost(player,-2);
                    playBoard.gather("human", "green");
                    playBoard.gather("ai1", "green");
                    playBoard.gather("ai2", "green");
                    playBoard.gainFoodPerFoodtile(player,2);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                }else if(playBoard.getHandCardGp("human").get(i) == MBcard.card.NgatherR2)
                {
                    playerTurn--;
                    playBoard.randomCost(player,-1);
                    typeSelectDialog1.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                }else if(playBoard.getHandCardGp("human").get(i) == MBcard.card.NgatherR3)
                {
                    playerTurn--;
                    playBoard.randomCost(player,-1);
                    playBoard.setCube(player, "golden", 5);
                    typeSelectDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                }else if(playBoard.getHandCardGp("human").get(i) == MBcard.card.GexploreR2
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.EexploreR1
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.NexploreR1)
                {
                    playerTurn--;
                    placeTile(5);
                    initRan(5);
                    productionDisplay.setName(Integer.toString(1));
                    productionFrame.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                }else if(playBoard.getHandCardGp("human").get(i) == MBcard.card.GexploreR3
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.EexploreR2
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.NexploreR2)
                {
                    playerTurn--;
                    placeTile(3);
                    initRan(3);
                    productionDisplay.setName(Integer.toString(1));
                    productionFrame.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                }else if(playBoard.getHandCardGp("human").get(i) == MBcard.card.GexploreR1
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.EexploreR3)
                {
                    if(playBoard.randomCost(player,-1))
                    {
                    playerTurn--;
                    placeTile(5);
                    initRan(5);
                    randomRoundCounter=2;
                    productionDisplay.setName(Integer.toString(1));
                    productionFrame.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                    }
                }else if(playBoard.getHandCardGp("human").get(i) == MBcard.card.NexploreR3)
                {
                    if(playBoard.randomCost(player,-1))
                    {
                    playerTurn--;
                    placeTile(3);
                    initRan(3);
                    randomRoundCounter=4;
                    productionDisplay.setName(Integer.toString(1));
                    productionFrame.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                    }
                }else if(playBoard.getHandCardGp("human").get(i) == MBcard.card.GnextageR1
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.EnextageR1
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.NnextageR1)
                {
                    playerTurn--;
                    playBoard.randomNextAge("human");
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                }else if(playBoard.getHandCardGp("human").get(i) == MBcard.card.GnextageR2)
                {
                    if(playBoard.randomCost(player,-2))
                    {
                        playerTurn--;
                        playBoard.randomNextAge("human");
                        destroyBuilding.setVisible(true);
                        refreshCube();
                        removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                    }
                }else if(playBoard.getHandCardGp("human").get(i) == MBcard.card.GnextageR3)
                {
                    if(playBoard.randomCost(player,-2))
                    {
                        playerTurn--;
                        playBoard.randomNextAge("human");
                        String age=playBoard.getAge(player);
                        playBoard.addHero(player,age);
                        destroyBuilding.setVisible(true);
                        refreshCube();
                        removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                    }
                }else if (playBoard.getHandCardGp("human").get(i) == MBcard.card.GrecruitR1
                         ||playBoard.getHandCardGp("human").get(i) == MBcard.card.ErecruitR1
                         ||playBoard.getHandCardGp("human").get(i) == MBcard.card.NrecruitR1)
                {
                    randomRecruitCount=3;
                    playerTurn--;
                    updateBattleCard(playBoard.humanCulture());
                    battleCardDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                }else if (playBoard.getHandCardGp("human").get(i) == MBcard.card.GrecruitR2
                         ||playBoard.getHandCardGp("human").get(i) == MBcard.card.ErecruitR2
                         ||playBoard.getHandCardGp("human").get(i) == MBcard.card.NrecruitR2)
                {
                    randomRecruitCount=4;
                    playerTurn--;
                    updateBattleCard(playBoard.humanCulture());
                    battleCardDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                }
                else if (playBoard.getHandCardGp("human").get(i) == MBcard.card.GrecruitR3
                         ||playBoard.getHandCardGp("human").get(i) == MBcard.card.ErecruitR3
                         ||playBoard.getHandCardGp("human").get(i) == MBcard.card.NrecruitR3)
                {
                    randomRecruitCount=4;
                    playerTurn--;
                    updateBattleCard(playBoard.humanCulture());
                    battleCardDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                }
                else if (playBoard.getHandCardGp("human").get(i) == MBcard.card.GrecruitR4)
                {
                    if(playBoard.randomCost(player,-1))
                    {
                    randomRecruitCount=4;
                    playerTurn--;
                    playBoard.add2Toxotes("human");
                    updateBattleCard(playBoard.humanCulture());
                    battleCardDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                    }
                }else if (playBoard.getHandCardGp("human").get(i) == MBcard.card.ErecruitR5)
                {
                    if(playBoard.randomCost(player,-2))
                    {
                    randomRecruitCount=4;
                    playerTurn--;
                    String age=playBoard.getAge(player);
                    playBoard.addHero(player,age);
                    updateBattleCard(playBoard.humanCulture());
                    battleCardDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                    }
                }else if (playBoard.getHandCardGp("human").get(i) == MBcard.card.NrecruitR4)
                {
                    if(playBoard.randomCost(player,-1))
                    {
                    randomRecruitCount=3;
                    playerTurn--;
                    playBoard.add2Axe(player);
                    updateBattleCard(playBoard.humanCulture());
                    battleCardDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                    }
                }else if (playBoard.getHandCardGp("human").get(i) == MBcard.card.GattackR2
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.EattackR1
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.NattackR1)
                {
                    playerTurn--;
                    updateBattleUnit();
                    setAttackArmy(5,5);
                    aiBattleSelect.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                }else if (playBoard.getHandCardGp("human").get(i) == MBcard.card.GattackR1
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.EattackR2
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.NattackR2)
                {
                    playerTurn--;
                    updateBattleUnit();
                    setAttackArmy(6,6);
                    aiBattleSelect.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                }else if (playBoard.getHandCardGp("human").get(i) == MBcard.card.GattackR3
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.EattackR3
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.NattackR3)
                {
                    playerTurn--;
                    updateBattleUnit();
                    setAttackArmy(7,7);
                    aiBattleSelect.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                }else if (playBoard.getHandCardGp("human").get(i) == MBcard.card.GattackR5
                       ||playBoard.getHandCardGp("human").get(i) == MBcard.card.EattackR5)
                {
                    if(playBoard.randomCost(player,-3))
                    {
                    playerTurn--;
                    updateBattleUnit();
                    setAttackArmy(8,6);
                    aiBattleSelect.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                    }
                }else if (playBoard.getHandCardGp("human").get(i) == MBcard.card.EattackR6)
                {
                    if(playBoard.randomCost(player,-1))
                    {
                    updateBattleUnit();
                    setAttackArmy(6,6);
                    aiBattleSelect.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                    }
                }else if (playBoard.getHandCardGp("human").get(i) == MBcard.card.NattackR4)
                {
                    if(playBoard.randomCost(player,-2))
                    {
                    updateBattleUnit();
                    playBoard.RanCardBuff();
                    setAttackArmy(6,6);
                    aiBattleSelect.setVisible(true);
                    refreshCube();
                    removeHandCard(player,playBoard.getHandCardGp("human").get(i));
                    }
                }
            }
        }
    }
     
    protected void randomtradeGENR1(String player){
        String cubeToR = null,cubeToA = null,cubeConsume = null;
        int tradeCost=1;
        switch(cubeLeft.getSelectedItem().toString().toLowerCase()){
            case"favor":
                cubeToR = "blue";
            break;
            case"food":
                cubeToR = "green";
            break;
            case"wood":
                cubeToR = "orange";
            break;
            case"gold":
                cubeToR = "golden";
            break;
            default:
            break;
        }
        switch(cubeRight.getSelectedItem().toString().toLowerCase()){
            case"favor":
                cubeToA = "blue";
            break;
            case"food":
                cubeToA = "green";
            break;
            case"wood":
                cubeToA = "orange";
            break;
            case"gold":
                cubeToA = "golden";
            break;
            default:
            break;
        }
        switch(consume.getSelectedItem().toString().toLowerCase()){
            case"favor":
                cubeConsume = "blue";
            break;
            case"food":
                cubeConsume = "green";
            break;
            case"wood":
                cubeConsume = "orange";
            break;
            case"gold":
                cubeConsume = "golden";
            break;
            default:
            break;
        }
        //Check for market
        if (playBoard.checkBuilding(player, MBproduction.buildingType.market) != -1){
            tradeCost = 0;
        }
        playBoard.trade(player, cubeConsume, tradeCost, cubeToR, -(tradeSlider.getValue()), cubeToA, tradeSlider.getValue());
    }
    
    protected void randomtradeGNR2(String player){
        String cubeToR = null,cubeToA = null,cubeConsume = null;
        int tradeCost=0;
        player = player.toLowerCase();
        switch(cubeLeft.getSelectedItem().toString().toLowerCase()){
            case"favor":
                cubeToR = "blue";
            break;
            case"food":
                cubeToR = "green";
            break;
            case"wood":
                cubeToR = "orange";
            break;
            case"gold":
                cubeToR = "golden";
            break;
            default:
            break;
        }
        switch(cubeRight.getSelectedItem().toString().toLowerCase()){
            case"favor":
                cubeToA = "blue";
            break;
            case"food":
                cubeToA = "green";
            break;
            case"wood":
                cubeToA = "orange";
            break;
            case"gold":
                cubeToA = "golden";
            break;
            default:
            break;
        }
        switch(consume.getSelectedItem().toString().toLowerCase()){
            case"favor":
                cubeConsume = "blue";
            break;
            case"food":
                cubeConsume = "green";
            break;
            case"wood":
                cubeConsume = "orange";
            break;
            case"gold":
                cubeConsume = "golden";
            break;
            default:
            break;
        }
        playBoard.randomCost(player,-1);
        playBoard.gain4Resource(player);
        playBoard.trade(player, cubeConsume, tradeCost, cubeToR, -(tradeSlider.getValue()), cubeToA, tradeSlider.getValue());
    }
    
    protected void buildTileLess(String player, String building){
        switch(building){
            case"armory":
                if(playBoard.buildLess(player, building))
                {
                    currentBuildCount++;
                    selectTile(player,0,"city",MBproduction.buildingType.armory);
                }
            break;
            case"woodWork":
                if(playBoard.buildLess(player, building))
                {
                    currentBuildCount++;
                    selectTile(player,0,"city",MBproduction.buildingType.woodWork);
                }
            break;
            case"market":
                if(playBoard.buildLess(player, building))
                {
                    selectTile(player,0,"city",MBproduction.buildingType.market);
                }
            break;
            case"house":
                if(playBoard.buildLess(player, building))
                {
                    currentBuildCount++;
                    selectTile(player,0,"city",MBproduction.buildingType.house);
                }
            break;
            case"monument":
                if(playBoard.buildLess(player, building))
                {
                    currentBuildCount++;
                    selectTile(player,0,"city",MBproduction.buildingType.monument);
                }
            break;
            case"granary":
                if(playBoard.buildLess(player, building))
                {
                    currentBuildCount++;
                    selectTile(player,0,"city",MBproduction.buildingType.granary);
                }
            break;
            case"storeHouse":
                if(playBoard.buildLess(player, building))
                {
                    currentBuildCount++;
                    selectTile(player,0,"city",MBproduction.buildingType.storeHouse);
                }
            break;
            case"siegeEngine":
                if(playBoard.buildLess(player, building))
                {
                    currentBuildCount++;
                    selectTile(player,0,"city",MBproduction.buildingType.siegeEngine);
                }
            break;
            case"greatTemple":
                if(playBoard.buildLess(player, building))
                {
                    currentBuildCount++;
                    selectTile(player,0,"city",MBproduction.buildingType.greatTemple);
                }
            break;
            case"wall":
                if(playBoard.buildLess(player, building))
                {
                    currentBuildCount++;
                    selectTile(player,0,"city",MBproduction.buildingType.wall);
                }
            break;
            case"wonder":
                if(playBoard.buildLess(player, building))
                {
                    currentBuildCount++;
                    selectTile(player,0,"city",MBproduction.buildingType.wonder);
                }
            break;
            case"goldMint":
                if(playBoard.buildLess(player, building))
                {
                    currentBuildCount++;
                    selectTile(player,0,"city",MBproduction.buildingType.goldMint);
                }
            break;
            case"quarry":
                if(playBoard.buildLess(player, building))
                {
                    currentBuildCount++;
                    selectTile(player,0,"city",MBproduction.buildingType.quarry);
                }
            break;
            case"tower":
                if(playBoard.buildLess(player, building))
                {
                    currentBuildCount++;
                    selectTile(player,0,"city",MBproduction.buildingType.tower);
                }
            break;
            default:
            break;                
        }
    }
    protected boolean removeTile(String player, int i, String area){
        String culture = null;
        boolean AIflag = false;
        /*******************************/
        player=player.toLowerCase();
        switch(player.toLowerCase()){
            case"human":
                culture = playBoard.humanCulture();
                break;
            case"ai1":
                culture = playBoard.AICulture1();
                break;
            case"ai2":
                culture = playBoard.AICulture2();
                break;
            default:
                break;
        }
        switch(culture.toLowerCase()){
            //norse
            case"norse":
                switch(area.toLowerCase()){
                    case"production":
                        
                               norseProduction.get(i).setIcon(null);
                    break;
                    case"city":
                        
                           
                               norseCity.get(i).setIcon(null);
                    break;
                }
            break;
            //greek    
            case"greek":
                switch(area.toLowerCase()){
                    case"production":

                               greekProduction.get(i).setIcon(null);
                    break;
                    case"city":
                        
                          
                               greekCity.get(i).setIcon(null);
                   break;
                }
                break;
            //egypt
            case"egypt":
                switch(area.toLowerCase()){
                    case"production":

                               egyptProduction.get(i).setIcon(null);
                    break;                          
                    case"city":
                               egyptCity.get(i).setIcon(null);
                    break;
                }
            break;
        }
        return AIflag; 
    }
    
    protected void AIidSelectedCard(String player, MBcard.card card){
        
                if (card == MBcard.card.Ggather
                        ||card == MBcard.card.Egather
                        ||card == MBcard.card.Ngather)
                {
                    playerTurn--;
                    JOptionPane.showMessageDialog(
                        null, "AI play Gather" , "Information",
                        JOptionPane.WARNING_MESSAGE);                   
                    int rGather = rm.nextInt(3);
                    if (rGather == 0){
                        playBoard.gather("human", "blue");
                        playBoard.gather("ai1", "blue");
                        playBoard.gather("ai2", "blue");
                    } else if (rGather == 1){
                        playBoard.gather("human", "green");
                        playBoard.gather("ai1", "green");
                        playBoard.gather("ai2", "green");
                    } else if (rGather == 2){
                        playBoard.gather("human", "orange");
                        playBoard.gather("ai1", "orange");
                        playBoard.gather("ai2", "orange");
                    } else if (rGather == 3){
                        playBoard.gather("human", "golden");
                        playBoard.gather("ai1", "golden");
                        playBoard.gather("ai2", "golden");
                    }
                    refreshCube();
                    removeHandCard(player,card);
                } else if (card == MBcard.card.Gattack
                         ||card == MBcard.card.Eattack
                         ||card == MBcard.card.Nattack)
                {
                    JOptionPane.showMessageDialog(
                        null, "AI Play Attack" , "Information",
                        JOptionPane.WARNING_MESSAGE);
                    playerTurn--;
                    updateBattleUnit();
                    setAttackArmy(4,4);
                    battleUnitDialog.setVisible(true);
                    aiBattleSelect.setVisible(true);      
                    whichAI = player;                          
                    refreshCube();
                    removeHandCard(player,card);
                } else if (card == MBcard.card.Gbuild
                         ||card == MBcard.card.Ebuild
                         ||card == MBcard.card.Nbuild)
                {
                    JOptionPane.showMessageDialog(
                        null, "AI Play Build" , "Information",
                        JOptionPane.WARNING_MESSAGE);
                    playerTurn--;
                    randomBuildCount=1;
                    int rBuild = rm.nextInt(2);
                    if (rBuild == 0){
                        buildTile(player,"house");
                    } else if (rBuild == 1){
                        buildTile(player,"goldmint");
                    } else if (rBuild == 2){
                        buildTile(player,"market");
                    }
                    refreshCube();
                    removeHandCard(player,card);
                } else if (card == MBcard.card.Gbuild
                         ||card == MBcard.card.Ebuild
                         ||card == MBcard.card.Nbuild)
                {
                    JOptionPane.showMessageDialog(
                        null, "AI Play Build" , "Information",
                        JOptionPane.WARNING_MESSAGE);
                    playerTurn--;
                    randomBuildCount=1;
                    buildDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                } else if (card == MBcard.card.Gnextage
                         ||card == MBcard.card.Enextage
                         ||card == MBcard.card.Nnextage)
                {
                    JOptionPane.showMessageDialog(
                        null, "AI Play NextAge" , "Information",
                        JOptionPane.WARNING_MESSAGE);
                    playerTurn--;
                    playBoard.nextAge(player);
                    refreshCube();
                    removeHandCard(player,card);
                } else if (card == MBcard.card.Gexplore
                         ||card == MBcard.card.Eexplore
                         ||card == MBcard.card.Nexplore)
                {
                    JOptionPane.showMessageDialog(
                        null, "AI Play Explore" , "Information",
                        JOptionPane.WARNING_MESSAGE);
                    playerTurn--;
                    placeTile(4);
                    initRan(4);
                    productionDisplay.setName(Integer.toString(1));
                    productionFrame.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                } else if (card == MBcard.card.Grecruit
                         ||card == MBcard.card.Erecruit
                         ||card == MBcard.card.Nrecruit)
                {
                    JOptionPane.showMessageDialog(
                        null, "AI Play Recruit" , "Information",
                        JOptionPane.WARNING_MESSAGE);
                    randomRecruitCount=2;
                    playerTurn--;
                    if (player.equalsIgnoreCase("ai1")){
                       updateBattleCard(playBoard.AICulture1());
                       idBattleUnitCard("ai1");
                    }
                    if (player.equalsIgnoreCase("ai2")){
                       updateBattleCard(playBoard.AICulture2());
                       idBattleUnitCard("ai2");
                    }                                       
                    refreshCube();
                    removeHandCard(player,card);
                    /*******************************************/
                }else if(card == MBcard.card.EtradeR1
                       ||card == MBcard.card.NtradeR1
                       ||card == MBcard.card.GtradeR1)
                {
                    playerTurn--;
                    tradeDialog1.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                }else if(card == MBcard.card.NtradeR2
                       ||card == MBcard.card.GtradeR2)
                {
                    playerTurn--;
                    tradeDialog2.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                }else if(card == MBcard.card.GbuildR1
                       ||card == MBcard.card.EbuildR1
                       ||card == MBcard.card.NbuildR1)
                {
                    playerTurn--;
                    randomBuildCount=2;
                    buildDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                }else if(card == MBcard.card.GbuildR2
                       ||card== MBcard.card.EbuildR2
                       ||card == MBcard.card.NbuildR2)
                {
                    playerTurn--;
                    randomBuildCount=3;
                    buildDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                }else if(card == MBcard.card.GbuildR3
                       ||card == MBcard.card.EbuildR3
                       ||card == MBcard.card.NbuildR3)
                {
                    playerTurn--;
                    randomBuildCount=4;
                    buildDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                }else if(card == MBcard.card.GbuildR4)
                {
                    playerTurn--;
                    randomBuildCount=3;
                    buildDialog.setVisible(true);
                    buildTile(player,"house");
                    playBoard.setCube(player, "orange", 2);
                    playBoard.setCube(player, "green", 2);
                    playBoard.randomCost(player,-1);
                    removeHandCard(player,card);
                    refreshCube();
                }
                else if(card == MBcard.card.EbuildR4)
                {
                    playerTurn--;
                    randomBuildCount=3;
                    buildDialog1.setVisible(true);
                    playBoard.randomCost(player,-2);
                    removeHandCard(player,card);
                    refreshCube();
                    
                }else if(card == MBcard.card.GgatherR1
                       ||card == MBcard.card.EgatherR1
                       ||card == MBcard.card.NgatherR1)
                {
                    playerTurn--;
                    playBoard.gather("human", "blue");
                    playBoard.gather("human", "orange");
                    playBoard.gather("human", "golden");
                    playBoard.gather("human", "green");
                    playBoard.gather("ai1", "blue");
                    playBoard.gather("ai1", "orange");
                    playBoard.gather("ai1", "golden");
                    playBoard.gather("ai1", "green");
                    playBoard.gather("ai2", "blue");
                    playBoard.gather("ai2", "orange");
                    playBoard.gather("ai2", "golden");
                    playBoard.gather("ai2", "green");
                    refreshCube();
                    removeHandCard(player,card);
                }else if(card == MBcard.card.GgatherR2)
                {
                    playerTurn--;
                    playBoard.setCube(player, "green", 5);
                    playBoard.randomCost(player,-1);
                    typeSelectDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                }else if(card == MBcard.card.GgatherR4)
                {
                    playerTurn--;
                    playBoard.randomCost(player,-2);
                    playBoard.gather("human", "green");
                    playBoard.gainFoodPerFoodtile(player,1);
                    refreshCube();
                    removeHandCard(player,card);
                }else if(card == MBcard.card.EgatherR2)
                {
                    playerTurn--;
                    playBoard.randomCost(player,-2);
                    playBoard.gather("human", "green");
                    playBoard.gather("ai1", "green");
                    playBoard.gather("ai2", "green");
                    playBoard.gainFoodPerFoodtile(player,2);
                    refreshCube();
                    removeHandCard(player,card);
                }else if(card == MBcard.card.NgatherR2)
                {
                    playerTurn--;
                    playBoard.randomCost(player,-1);
                    typeSelectDialog1.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                }else if(card == MBcard.card.NgatherR3)
                {
                    playerTurn--;
                    playBoard.randomCost(player,-1);
                    playBoard.setCube(player, "golden", 5);
                    typeSelectDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                }else if(card == MBcard.card.GexploreR2
                       ||card == MBcard.card.EexploreR1
                       ||card == MBcard.card.NexploreR1)
                {
                    playerTurn--;
                    placeTile(5);
                    initRan(5);
                    productionDisplay.setName(Integer.toString(1));
                    productionFrame.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                }else if(card == MBcard.card.GexploreR3
                       ||card == MBcard.card.EexploreR2
                       ||card == MBcard.card.NexploreR2)
                {
                    playerTurn--;
                    placeTile(3);
                    initRan(3);
                    productionDisplay.setName(Integer.toString(1));
                    productionFrame.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                }else if(card == MBcard.card.GexploreR1
                       ||card == MBcard.card.EexploreR3)
                {
                    if(playBoard.randomCost(player,-1))
                    {
                    playerTurn--;
                    placeTile(5);
                    initRan(5);
                    randomRoundCounter=2;
                    productionDisplay.setName(Integer.toString(1));
                    productionFrame.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                    }
                }else if(card == MBcard.card.NexploreR3)
                {
                    if(playBoard.randomCost(player,-1))
                    {
                    playerTurn--;
                    placeTile(3);
                    initRan(3);
                    randomRoundCounter=4;
                    productionDisplay.setName(Integer.toString(1));
                    productionFrame.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                    }
                }else if(card== MBcard.card.GnextageR1
                       ||card == MBcard.card.EnextageR1
                       ||card == MBcard.card.NnextageR1)
                {
                    playerTurn--;
                    playBoard.randomNextAge("human");
                    refreshCube();
                    removeHandCard(player,card);
                }else if(card == MBcard.card.GnextageR2)
                {
                    if(playBoard.randomCost(player,-2))
                    {
                        playerTurn--;
                        playBoard.randomNextAge("human");
                        destroyBuilding.setVisible(true);
                        refreshCube();
                        removeHandCard(player,card);
                    }
                }else if(card == MBcard.card.GnextageR3)
                {
                    if(playBoard.randomCost(player,-2))
                    {
                        playerTurn--;
                        playBoard.randomNextAge("human");
                        String age=playBoard.getAge(player);
                        playBoard.addHero(player,age);
                        destroyBuilding.setVisible(true);
                        refreshCube();
                        removeHandCard(player,card);
                    }
                }else if (card == MBcard.card.GrecruitR1
                         ||card == MBcard.card.ErecruitR1
                         ||card == MBcard.card.NrecruitR1)
                {
                    randomRecruitCount=3;
                    playerTurn--;
                    updateBattleCard(playBoard.humanCulture());
                    battleCardDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                }else if (card == MBcard.card.GrecruitR2
                         ||card == MBcard.card.ErecruitR2
                         ||card == MBcard.card.NrecruitR2)
                {
                    randomRecruitCount=4;
                    playerTurn--;
                    updateBattleCard(playBoard.humanCulture());
                    battleCardDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                }
                else if (card == MBcard.card.GrecruitR3
                         ||card == MBcard.card.ErecruitR3
                         ||card == MBcard.card.NrecruitR3)
                {
                    randomRecruitCount=4;
                    playerTurn--;
                    updateBattleCard(playBoard.humanCulture());
                    battleCardDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                }
                else if (card == MBcard.card.GrecruitR4)
                {
                    if(playBoard.randomCost(player,-1))
                    {
                    randomRecruitCount=4;
                    playerTurn--;
                    playBoard.add2Toxotes("human");
                    updateBattleCard(playBoard.humanCulture());
                    battleCardDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                    }
                }else if (card == MBcard.card.ErecruitR5)
                {
                    if(playBoard.randomCost(player,-2))
                    {
                    randomRecruitCount=4;
                    playerTurn--;
                    String age=playBoard.getAge(player);
                    playBoard.addHero(player,age);
                    updateBattleCard(playBoard.humanCulture());
                    battleCardDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                    }
                }else if (card == MBcard.card.NrecruitR4)
                {
                    if(playBoard.randomCost(player,-1))
                    {
                    randomRecruitCount=3;
                    playerTurn--;
                    playBoard.add2Axe(player);
                    updateBattleCard(playBoard.humanCulture());
                    battleCardDialog.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                    }
                }else if (card == MBcard.card.GattackR2
                       ||card == MBcard.card.EattackR1
                       ||card == MBcard.card.NattackR1)
                {
                    playerTurn--;
                    updateBattleUnit();
                    setAttackArmy(5,5);
                    aiBattleSelect.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                }else if (card == MBcard.card.GattackR1
                       ||card == MBcard.card.EattackR2
                       ||card == MBcard.card.NattackR2)
                {
                    playerTurn--;
                    updateBattleUnit();
                    setAttackArmy(6,6);
                    aiBattleSelect.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                }else if (card == MBcard.card.GattackR3
                       ||card == MBcard.card.EattackR3
                       ||card == MBcard.card.NattackR3)
                {
                    playerTurn--;
                    updateBattleUnit();
                    setAttackArmy(7,7);
                    aiBattleSelect.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                }else if (card == MBcard.card.GattackR5
                       ||card == MBcard.card.EattackR5)
                {
                    if(playBoard.randomCost(player,-3))
                    {
                    playerTurn--;
                    updateBattleUnit();
                    setAttackArmy(8,6);
                    aiBattleSelect.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                    }
                }else if (card == MBcard.card.EattackR6)
                {
                    if(playBoard.randomCost(player,-1))
                    {
                    updateBattleUnit();
                    setAttackArmy(6,6);
                    aiBattleSelect.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                    }
                }else if (card == MBcard.card.NattackR4)
                {
                    if(playBoard.randomCost(player,-2))
                    {
                    updateBattleUnit();
                    playBoard.RanCardBuff();
                    setAttackArmy(6,6);
                    aiBattleSelect.setVisible(true);
                    refreshCube();
                    removeHandCard(player,card);
                    }
                }else if(card == MBcard.card.NnextageR2)
                {
                    if(playBoard.randomCost(player,-1))
                    {
                        playBoard.randomNextAge("human");
                        destroyBuilding.setVisible(true);
                        refreshCube();
                        removeHandCard(player,card);
                    }
                }else if(card == MBcard.card.NbuildR4)
                {
                    if(playBoard.randomCost(player,-1))
                    {
                    playerTurn--;
                    randomBuildCount=4;
                    destroyBuilding.setVisible(true);
                    buildDialog1.setVisible(true);
                    removeHandCard(player,card);
                    refreshCube();
                    }
         
        }
    }
    
    protected void AIturn(int cpuTurn){
        if (cpuTurn == 0){
        AIidSelectedCard("ai1",playBoard.getHandCardGp("ai1").get(0));
        }
        if (cpuTurn == 1){
        AIidSelectedCard("ai1",playBoard.getHandCardGp("ai1").get(0));
        }
        if (cpuTurn == 2){
        AIidSelectedCard("ai1",playBoard.getHandCardGp("ai1").get(0));
        }
        if (cpuTurn == 3){
        AIidSelectedCard("ai1",playBoard.getHandCardGp("ai1").get(0));
        }
        if (cpuTurn == 4){
        AIidSelectedCard("ai2",playBoard.getHandCardGp("ai2").get(0));
        }
        if (cpuTurn == 5){
        AIidSelectedCard("ai2",playBoard.getHandCardGp("ai2").get(0));
        }
        if (cpuTurn == 6){
        AIidSelectedCard("ai2",playBoard.getHandCardGp("ai2").get(0));
        }
        if (cpuTurn == 7){
        AIidSelectedCard("ai2",playBoard.getHandCardGp("ai2").get(0));
        }
        if (cpuTurn == 8){
        endTurn("ai");
        JOptionPane.showMessageDialog(
                        null, "End of AI turn" , "Information",
                        JOptionPane.WARNING_MESSAGE);
        }
        cpuTurns++;
    }
    
/******************************************************************************/
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel E11;
    private javax.swing.JLabel E12;
    private javax.swing.JLabel E13;
    private javax.swing.JLabel E14;
    private javax.swing.JLabel E21;
    private javax.swing.JLabel E22;
    private javax.swing.JLabel E23;
    private javax.swing.JLabel E24;
    private javax.swing.JLabel E31;
    private javax.swing.JLabel E32;
    private javax.swing.JLabel E33;
    private javax.swing.JLabel E34;
    private javax.swing.JLabel E41;
    private javax.swing.JLabel E42;
    private javax.swing.JLabel E43;
    private javax.swing.JLabel E44;
    private javax.swing.JLabel G11;
    private javax.swing.JLabel G12;
    private javax.swing.JLabel G13;
    private javax.swing.JLabel G14;
    private javax.swing.JLabel G21;
    private javax.swing.JLabel G22;
    private javax.swing.JLabel G23;
    private javax.swing.JLabel G24;
    private javax.swing.JLabel G31;
    private javax.swing.JLabel G32;
    private javax.swing.JLabel G33;
    private javax.swing.JLabel G34;
    private javax.swing.JLabel G41;
    private javax.swing.JLabel G42;
    private javax.swing.JLabel G43;
    private javax.swing.JLabel G44;
    private javax.swing.JLabel N11;
    private javax.swing.JLabel N12;
    private javax.swing.JLabel N13;
    private javax.swing.JLabel N14;
    private javax.swing.JLabel N21;
    private javax.swing.JLabel N22;
    private javax.swing.JLabel N23;
    private javax.swing.JLabel N24;
    private javax.swing.JLabel N31;
    private javax.swing.JLabel N32;
    private javax.swing.JLabel N33;
    private javax.swing.JLabel N34;
    private javax.swing.JLabel N41;
    private javax.swing.JLabel N42;
    private javax.swing.JLabel N43;
    private javax.swing.JLabel N44;
    private javax.swing.JPanel agePane;
    private javax.swing.JLabel ai1BlueCube;
    private javax.swing.JLabel ai1CultureLabel;
    private javax.swing.JLabel ai1GoldenCube;
    private javax.swing.JLabel ai1GreenCube;
    private javax.swing.JLabel ai1OrangeCube;
    private javax.swing.JLabel ai1RedCube;
    private javax.swing.JLayeredPane ai1Score;
    private javax.swing.JLabel ai2BlueCube;
    private javax.swing.JLabel ai2CultureLabel;
    private javax.swing.JLabel ai2GoldenCube;
    private javax.swing.JLabel ai2GreenCube;
    private javax.swing.JLabel ai2OrangeCube;
    private javax.swing.JLabel ai2RedCube;
    private static javax.swing.JDialog aiBattleSelect;
    private javax.swing.JLabel bCube;
    private javax.swing.JLabel bCube1;
    private javax.swing.JLabel bCube2;
    private javax.swing.JDialog battleCardDialog;
    private javax.swing.JLayeredPane battleCardPane;
    private javax.swing.JLabel battleUnit1;
    private javax.swing.JLabel battleUnit10;
    private javax.swing.JLabel battleUnit11;
    private javax.swing.JLabel battleUnit12;
    private javax.swing.JLabel battleUnit2;
    private javax.swing.JLabel battleUnit3;
    private javax.swing.JLabel battleUnit4;
    private javax.swing.JLabel battleUnit5;
    private javax.swing.JLabel battleUnit6;
    private javax.swing.JLabel battleUnit7;
    private javax.swing.JLabel battleUnit8;
    private javax.swing.JLabel battleUnit9;
    private javax.swing.JDialog battleUnitDialog;
    private javax.swing.JLayeredPane battleUnitPane;
    private javax.swing.JButton buildButton;
    private javax.swing.JButton buildButton1;
    private javax.swing.JDialog buildDialog;
    private javax.swing.JDialog buildDialog1;
    private javax.swing.JLayeredPane buildPane;
    private javax.swing.JLayeredPane buildPane1;
    private javax.swing.JComboBox buildingsBox;
    private javax.swing.JComboBox buildingsBox1;
    private javax.swing.JLabel cardLeftAge;
    private javax.swing.JButton conform;
    private javax.swing.JButton conform1;
    private javax.swing.JButton conform2;
    private javax.swing.JComboBox consume;
    private javax.swing.JComboBox consume1;
    private javax.swing.JComboBox consume2;
    private javax.swing.JComboBox cubeLeft;
    private javax.swing.JComboBox cubeLeft1;
    private javax.swing.JComboBox cubeLeft2;
    private javax.swing.JTextField cubeLeftNum;
    private javax.swing.JTextField cubeLeftNum1;
    private javax.swing.JTextField cubeLeftNum2;
    private javax.swing.JComboBox cubeRight;
    private javax.swing.JComboBox cubeRight1;
    private javax.swing.JComboBox cubeRight2;
    private javax.swing.JTextField cubeRightNum;
    private javax.swing.JTextField cubeRightNum1;
    private javax.swing.JTextField cubeRightNum2;
    private static javax.swing.JDialog cultureDialog;
    private javax.swing.JButton cultureEgypt;
    private javax.swing.JButton cultureGreek;
    private javax.swing.JButton cultureNorse;
    private javax.swing.JLayeredPane cultureSelection;
    private javax.swing.JLayeredPane cultureSelection1;
    private javax.swing.JLayeredPane cultureSelection2;
    private javax.swing.JLayeredPane cultureSelection3;
    private javax.swing.JLabel currAge;
    private javax.swing.JDialog destroyBuilding;
    private javax.swing.JLabel e11;
    private javax.swing.JLabel e12;
    private javax.swing.JLabel e13;
    private javax.swing.JLabel e14;
    private javax.swing.JLabel e21;
    private javax.swing.JLabel e22;
    private javax.swing.JLabel e23;
    private javax.swing.JLabel e24;
    private javax.swing.JLabel e31;
    private javax.swing.JLabel e32;
    private javax.swing.JLabel e33;
    private javax.swing.JLabel e34;
    private javax.swing.JLabel e41;
    private javax.swing.JLabel e42;
    private javax.swing.JLabel e43;
    private javax.swing.JLabel e44;
    private javax.swing.JLayeredPane egyptBackLayer;
    private javax.swing.JLabel egyptBackground;
    private javax.swing.JLayeredPane egyptCityArea;
    private javax.swing.JLayeredPane egyptGridLayer;
    private javax.swing.JLayeredPane egyptLayer;
    private javax.swing.JLayeredPane egyptProductArea;
    private javax.swing.JButton favorCube;
    private javax.swing.JButton favorCube1;
    private javax.swing.JButton foodCube;
    private javax.swing.JButton foodCube1;
    private javax.swing.JLabel g11;
    private javax.swing.JLabel g12;
    private javax.swing.JLabel g13;
    private javax.swing.JLabel g14;
    private javax.swing.JLabel g21;
    private javax.swing.JLabel g22;
    private javax.swing.JLabel g23;
    private javax.swing.JLabel g24;
    private javax.swing.JLabel g31;
    private javax.swing.JLabel g32;
    private javax.swing.JLabel g33;
    private javax.swing.JLabel g34;
    private javax.swing.JLabel g41;
    private javax.swing.JLabel g42;
    private javax.swing.JLabel g43;
    private javax.swing.JLabel g44;
    private javax.swing.JLabel gCube;
    private javax.swing.JLabel gCube1;
    private javax.swing.JLabel gCube2;
    private javax.swing.JLabel goCube;
    private javax.swing.JLabel goCube2;
    private javax.swing.JLabel goCube3;
    private javax.swing.JButton goldCube;
    private javax.swing.JButton goldCube1;
    private javax.swing.JLayeredPane greekBackLayer;
    private javax.swing.JLabel greekBackground;
    private javax.swing.JLayeredPane greekCityArea;
    private javax.swing.JLayeredPane greekGridLayer;
    private javax.swing.JLayeredPane greekLayer;
    private javax.swing.JLayeredPane greekProductArea;
    private javax.swing.JLabel hBlueCube;
    private javax.swing.JLabel hCultureLabel;
    private javax.swing.JLabel hGoldenCube;
    private javax.swing.JLabel hGreenCube;
    private javax.swing.JLabel hOrangeCube;
    private javax.swing.JLabel hRedCube;
    private javax.swing.JButton handButton;
    private javax.swing.JLabel handCard1;
    private javax.swing.JLabel handCard10;
    private javax.swing.JLabel handCard2;
    private javax.swing.JLabel handCard3;
    private javax.swing.JLabel handCard4;
    private javax.swing.JLabel handCard5;
    private javax.swing.JLabel handCard6;
    private javax.swing.JLabel handCard7;
    private javax.swing.JLabel handCard8;
    private javax.swing.JLabel handCard9;
    private javax.swing.JDialog handCardDialog;
    private javax.swing.JLayeredPane handCardPane;
    private javax.swing.JLayeredPane humanScore;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelx1;
    private javax.swing.JLabel jLabelx2;
    private javax.swing.JLabel jLabelx3;
    private javax.swing.JLabel jLabelx4;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel largArmyCard;
    private javax.swing.JLabel lastBattCard;
    private javax.swing.JToolBar mainActionBar;
    private javax.swing.JLayeredPane mainLayer;
    private javax.swing.JScrollPane mainScrollPane;
    private javax.swing.JScrollPane mainScrollPane2;
    private javax.swing.JScrollPane mainScrollPane3;
    private javax.swing.JScrollPane mainScrollPane4;
    private javax.swing.JScrollPane mainScrollPane5;
    private javax.swing.JScrollPane mainScrollPane6;
    private javax.swing.JLabel mostBuildCard;
    private javax.swing.JLabel multiP;
    private javax.swing.JLabel multiP1;
    private javax.swing.JLabel multiP10;
    private javax.swing.JLabel multiP11;
    private javax.swing.JLabel multiP12;
    private javax.swing.JLabel multiP13;
    private javax.swing.JLabel multiP14;
    private javax.swing.JLabel multiP2;
    private javax.swing.JLabel multiP3;
    private javax.swing.JLabel multiP4;
    private javax.swing.JLabel multiP5;
    private javax.swing.JLabel multiP6;
    private javax.swing.JLabel multiP7;
    private javax.swing.JLabel multiP8;
    private javax.swing.JLabel multiP9;
    private javax.swing.JLabel n11;
    private javax.swing.JLabel n12;
    private javax.swing.JLabel n13;
    private javax.swing.JLabel n14;
    private javax.swing.JLabel n21;
    private javax.swing.JLabel n22;
    private javax.swing.JLabel n23;
    private javax.swing.JLabel n24;
    private javax.swing.JLabel n31;
    private javax.swing.JLabel n32;
    private javax.swing.JLabel n33;
    private javax.swing.JLabel n34;
    private javax.swing.JLabel n41;
    private javax.swing.JLabel n42;
    private javax.swing.JLabel n43;
    private javax.swing.JLabel n44;
    private javax.swing.JButton nextButton;
    private javax.swing.JLayeredPane norseBackLayer;
    private javax.swing.JLabel norseBackground;
    private javax.swing.JLayeredPane norseCityArea;
    private javax.swing.JLayeredPane norseGridLayer;
    private javax.swing.JLayeredPane norseLayer;
    private javax.swing.JLayeredPane norseProductArea;
    private javax.swing.JLabel oCube;
    private javax.swing.JLabel oCube1;
    private javax.swing.JLabel oCube2;
    private javax.swing.JLabel p1;
    private javax.swing.JLabel p10;
    private javax.swing.JLabel p11;
    private javax.swing.JLabel p12;
    private javax.swing.JLabel p13;
    private javax.swing.JLabel p14;
    private javax.swing.JLabel p15;
    private javax.swing.JLabel p16;
    private javax.swing.JLabel p17;
    private javax.swing.JLabel p18;
    private javax.swing.JLabel p2;
    private javax.swing.JLabel p3;
    private javax.swing.JLabel p4;
    private javax.swing.JLabel p5;
    private javax.swing.JLabel p6;
    private javax.swing.JLabel p7;
    private javax.swing.JLabel p8;
    private javax.swing.JLabel p9;
    private javax.swing.JLabel permaCard1;
    private javax.swing.JLabel permaCard2;
    private javax.swing.JLabel permaCard3;
    private javax.swing.JLabel permaCard4;
    private javax.swing.JLabel permaCard5;
    private javax.swing.JLabel permaCard6;
    private javax.swing.JLabel permaCard7;
    private javax.swing.JDialog permaCardDialog;
    private javax.swing.JLayeredPane permaCardPane;
    private javax.swing.JLabel playerUnit1;
    private javax.swing.JLabel playerUnit10;
    private javax.swing.JLabel playerUnit11;
    private javax.swing.JLabel playerUnit12;
    private javax.swing.JLabel playerUnit2;
    private javax.swing.JLabel playerUnit3;
    private javax.swing.JLabel playerUnit4;
    private javax.swing.JLabel playerUnit5;
    private javax.swing.JLabel playerUnit6;
    private javax.swing.JLabel playerUnit7;
    private javax.swing.JLabel playerUnit8;
    private javax.swing.JLabel playerUnit9;
    private javax.swing.JButton previousButton;
    private javax.swing.JLayeredPane productionDisplay;
    private javax.swing.JFrame productionFrame;
    private javax.swing.JLabel rCube;
    private javax.swing.JLabel rCube1;
    private javax.swing.JLabel rCube2;
    private javax.swing.JButton recruit;
    private javax.swing.JLabel redCubeOnTLA;
    private javax.swing.JLabel redCubeOnTLB;
    private javax.swing.JLabel redCubeOnTMB;
    private javax.swing.JLabel redCubeOnTW;
    private javax.swing.JButton remove;
    private javax.swing.JLayeredPane scoreLayer;
    private javax.swing.JComboBox selectBuilding;
    private javax.swing.JComboBox selectPlayer;
    private javax.swing.JButton startButton;
    private javax.swing.JButton toAI1;
    private javax.swing.JButton toAI2;
    private javax.swing.JDialog tradeDialog;
    private javax.swing.JDialog tradeDialog1;
    private javax.swing.JDialog tradeDialog2;
    private javax.swing.JLayeredPane tradePane;
    private javax.swing.JLayeredPane tradePane1;
    private javax.swing.JLayeredPane tradePane2;
    private javax.swing.JSlider tradeSlider;
    private javax.swing.JSlider tradeSlider1;
    private javax.swing.JSlider tradeSlider2;
    private static javax.swing.JDialog typeSelectDialog;
    private static javax.swing.JDialog typeSelectDialog1;
    private javax.swing.JButton unitButton;
    private javax.swing.JLabel vcRCube;
    private javax.swing.JLabel vcRCube2;
    private javax.swing.JLabel vcRCube3;
    private javax.swing.JLabel vcRcube4;
    private javax.swing.JLayeredPane vectCard;
    private javax.swing.JDialog vectoryCardDialog;
    private javax.swing.JLabel wonderCard;
    private javax.swing.JButton woodCube;
    private javax.swing.JButton woodCube1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
